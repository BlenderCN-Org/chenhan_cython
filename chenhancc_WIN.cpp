/* Generated by Cython 0.26.1 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_26_1"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__chenhancc_WIN
#define __PYX_HAVE_API__chenhancc_WIN
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <set>
#include <vector>
#include <map>
#include "autowrap_tools.hpp"
#include "boost/smart_ptr/shared_ptr.hpp"
#include "Point3D.hpp"
#include "BaseModel.hpp"
#include "RichModel.hpp"
#include "ExactMethodForDGP.hpp"
#include "PreviousCH.hpp"
#include "ImprovedCHWithEdgeValve.hpp"
#include "ICHWithFurtherPriorityQueue.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "ascii  # for cython>=0.19"
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "chenhancc_WIN.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_13chenhancc_WIN_CBaseModel;
struct __pyx_obj_13chenhancc_WIN_CEdge;
struct __pyx_obj_13chenhancc_WIN_CFace;
struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue;
struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve;
struct __pyx_obj_13chenhancc_WIN_CPoint3D;
struct __pyx_obj_13chenhancc_WIN_CPreviousCH;
struct __pyx_obj_13chenhancc_WIN_CRichModel;
struct __pyx_obj_13chenhancc_WIN_EdgePoint;
struct __pyx_obj_13chenhancc_WIN_InfoAtVertex;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr;
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr;

/* "chenhancc_WIN.pyx":31
 *     char * _cast_const_away(char *)
 * 
 * cdef class CBaseModel:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_CBaseModel] inst
 */
struct __pyx_obj_13chenhancc_WIN_CBaseModel {
  PyObject_HEAD
  boost::shared_ptr<CBaseModel>  inst;
};


/* "chenhancc_WIN.pyx":77
 *         return py_result
 * 
 * cdef class CEdge:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_CEdge] inst
 */
struct __pyx_obj_13chenhancc_WIN_CEdge {
  PyObject_HEAD
  boost::shared_ptr<CEdge>  inst;
};


/* "chenhancc_WIN.pyx":177
 *         self.inst = shared_ptr[_CEdge](new _CEdge())
 * 
 * cdef class CFace:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_CFace] inst
 */
struct __pyx_obj_13chenhancc_WIN_CFace {
  PyObject_HEAD
  boost::shared_ptr<CFace>  inst;
};


/* "chenhancc_WIN.pyx":217
 *         self.inst.get().setIndices((<int>in_0), (<int>in_1), (<int>in_2))
 * 
 * cdef class CICHWithFurtherPriorityQueue:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_CICHWithFurtherPriorityQueue] inst
 */
struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue {
  PyObject_HEAD
  boost::shared_ptr<CICHWithFurtherPriorityQueue>  inst;
};


/* "chenhancc_WIN.pyx":327
 *         return py_result
 * 
 * cdef class CImprovedCHWithEdgeValve:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_CImprovedCHWithEdgeValve] inst
 */
struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve {
  PyObject_HEAD
  boost::shared_ptr<CImprovedCHWithEdgeValve>  inst;
};


/* "chenhancc_WIN.pyx":437
 *         return py_result
 * 
 * cdef class CPoint3D:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_CPoint3D] inst
 */
struct __pyx_obj_13chenhancc_WIN_CPoint3D {
  PyObject_HEAD
  boost::shared_ptr<CPoint3D>  inst;
};


/* "chenhancc_WIN.pyx":518
 *         return py_result
 * 
 * cdef class CPreviousCH:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_CPreviousCH] inst
 */
struct __pyx_obj_13chenhancc_WIN_CPreviousCH {
  PyObject_HEAD
  boost::shared_ptr<CPreviousCH>  inst;
};


/* "chenhancc_WIN.pyx":628
 *         return py_result
 * 
 * cdef class CRichModel:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_CRichModel] inst
 */
struct __pyx_obj_13chenhancc_WIN_CRichModel {
  PyObject_HEAD
  boost::shared_ptr<CRichModel>  inst;
};


/* "chenhancc_WIN.pyx":764
 *         return py_result
 * 
 * cdef class EdgePoint:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_EdgePoint] inst
 */
struct __pyx_obj_13chenhancc_WIN_EdgePoint {
  PyObject_HEAD
  boost::shared_ptr<EdgePoint>  inst;
};


/* "chenhancc_WIN.pyx":864
 *         return py_result
 * 
 * cdef class InfoAtVertex:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_InfoAtVertex] inst
 */
struct __pyx_obj_13chenhancc_WIN_InfoAtVertex {
  PyObject_HEAD
  boost::shared_ptr<InfoAtVertex>  inst;
};


/* "chenhancc_WIN.pyx":43
 *         self.inst = shared_ptr[_CBaseModel](new _CBaseModel())
 * 
 *     def LoadModel(self, list vertices , list faces ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel {
  PyObject_HEAD
  PyObject *__pyx_v_faces;
  PyObject *__pyx_v_vertices;
};


/* "chenhancc_WIN.pyx":45
 *     def LoadModel(self, list vertices , list faces ):
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "chenhancc_WIN.pyx":46
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "chenhancc_WIN.pyx":225
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CICHWithFurtherPriorityQueue(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ {
  PyObject_HEAD
  PyObject *__pyx_v_indexOfSourceVerts;
};


/* "chenhancc_WIN.pyx":228
 *         """Cython signature: void CICHWithFurtherPriorityQueue(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *__pyx_outer_scope;
  PyObject *__pyx_v_li;
};


/* "chenhancc_WIN.pyx":241
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex {
  PyObject_HEAD
  PyObject *__pyx_v_resultingPath;
};


/* "chenhancc_WIN.pyx":244
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "chenhancc_WIN.pyx":335
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CImprovedCHWithEdgeValve(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ {
  PyObject_HEAD
  PyObject *__pyx_v_indexOfSourceVerts;
};


/* "chenhancc_WIN.pyx":338
 *         """Cython signature: void CImprovedCHWithEdgeValve(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *__pyx_outer_scope;
  PyObject *__pyx_v_li;
};


/* "chenhancc_WIN.pyx":351
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex {
  PyObject_HEAD
  PyObject *__pyx_v_resultingPath;
};


/* "chenhancc_WIN.pyx":354
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "chenhancc_WIN.pyx":526
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPreviousCH(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ {
  PyObject_HEAD
  PyObject *__pyx_v_indexOfSourceVerts;
};


/* "chenhancc_WIN.pyx":529
 *         """Cython signature: void CPreviousCH(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *__pyx_outer_scope;
  PyObject *__pyx_v_li;
};


/* "chenhancc_WIN.pyx":542
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex {
  PyObject_HEAD
  PyObject *__pyx_v_resultingPath;
};


/* "chenhancc_WIN.pyx":545
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "chenhancc_WIN.pyx":730
 *         return py_result
 * 
 *     def LoadModel(self, list vertices , list faces ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel {
  PyObject_HEAD
  PyObject *__pyx_v_faces;
  PyObject *__pyx_v_vertices;
};


/* "chenhancc_WIN.pyx":732
 *     def LoadModel(self, list vertices , list faces ):
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* "chenhancc_WIN.pyx":733
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 */
struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr {
  PyObject_HEAD
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* bytes_index.proto */
static CYTHON_INLINE char __Pyx_PyBytes_GetItemInt(PyObject* bytes, Py_ssize_t index, int check_bounds);

/* IncludeStringH.proto */
#include <string.h>

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'AutowrapRefHolder' */

/* Module declarations from 'AutowrapPtrHolder' */

/* Module declarations from 'AutowrapConstPtrHolder' */

/* Module declarations from 'smart_ptr' */

/* Module declarations from 'chenhancc' */

/* Module declarations from 'chenhancc_WIN' */
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_CBaseModel = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_CEdge = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_CFace = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_CICHWithFurtherPriorityQueue = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_CImprovedCHWithEdgeValve = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_CPoint3D = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_CPreviousCH = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_CRichModel = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_EdgePoint = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN_InfoAtVertex = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct__LoadModel = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_2_genexpr = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_3___init__ = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_7___init__ = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_8_genexpr = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_10_genexpr = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_11___init__ = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_12_genexpr = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_14_genexpr = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_15_LoadModel = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_16_genexpr = 0;
static PyTypeObject *__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_17_genexpr = 0;
static std::set<int>  __pyx_convert_set_from_py_int(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "chenhancc_WIN"
int __pyx_module_is_main_chenhancc_WIN = 0;

/* Implementation of 'chenhancc_WIN' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_chr;
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_in_0[] = "in_0";
static const char __pyx_k_in_1[] = "in_1";
static const char __pyx_k_in_2[] = "in_2";
static const char __pyx_k_in_3[] = "in_3";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_faces[] = "faces";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_init_0[] = "_init_0";
static const char __pyx_k_init_1[] = "_init_1";
static const char __pyx_k_init_2[] = "_init_2";
static const char __pyx_k_init_3[] = "_init_3";
static const char __pyx_k_init_4[] = "_init_4";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_vertices[] = "vertices";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_inputModel[] = "inputModel";
static const char __pyx_k_indexOfVert[] = "indexOfVert";
static const char __pyx_k_chenhancc_WIN[] = "chenhancc_WIN";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_resultingPath[] = "resultingPath";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_arg_num_wrong_type[] = "arg num wrong type";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_indexOfSourceVerts[] = "indexOfSourceVerts";
static const char __pyx_k_arg_in_0_wrong_type[] = "arg in_0 wrong type";
static const char __pyx_k_arg_in_1_wrong_type[] = "arg in_1 wrong type";
static const char __pyx_k_arg_in_2_wrong_type[] = "arg in_2 wrong type";
static const char __pyx_k_arg_in_3_wrong_type[] = "arg in_3 wrong type";
static const char __pyx_k_arg_faces_wrong_type[] = "arg faces wrong type";
static const char __pyx_k_arg_index_wrong_type[] = "arg index wrong type";
static const char __pyx_k_arg_other_wrong_type[] = "arg other wrong type";
static const char __pyx_k_init___locals_genexpr[] = "__init__.<locals>.genexpr";
static const char __pyx_k_arg_vertices_wrong_type[] = "arg vertices wrong type";
static const char __pyx_k_LoadModel_locals_genexpr[] = "LoadModel.<locals>.genexpr";
static const char __pyx_k_can_not_handle_type_of_s[] = "can not handle type of %s";
static const char __pyx_k_arg_inputModel_wrong_type[] = "arg inputModel wrong type";
static const char __pyx_k_arg_indexOfVert_wrong_type[] = "arg indexOfVert wrong type";
static const char __pyx_k_arg_resultingPath_wrong_type[] = "arg resultingPath wrong type";
static const char __pyx_k_FindSourceVertex_locals_genexpr[] = "FindSourceVertex.<locals>.genexpr";
static const char __pyx_k_arg_indexOfSourceVerts_wrong_typ[] = "arg indexOfSourceVerts wrong type";
static const char __pyx_k_self_inst_cannot_be_converted_to[] = "self.inst cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_FindSourceVertex_locals_genexpr;
static PyObject *__pyx_n_s_LoadModel_locals_genexpr;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_arg_faces_wrong_type;
static PyObject *__pyx_kp_s_arg_in_0_wrong_type;
static PyObject *__pyx_kp_s_arg_in_1_wrong_type;
static PyObject *__pyx_kp_s_arg_in_2_wrong_type;
static PyObject *__pyx_kp_s_arg_in_3_wrong_type;
static PyObject *__pyx_kp_s_arg_indexOfSourceVerts_wrong_typ;
static PyObject *__pyx_kp_s_arg_indexOfVert_wrong_type;
static PyObject *__pyx_kp_s_arg_index_wrong_type;
static PyObject *__pyx_kp_s_arg_inputModel_wrong_type;
static PyObject *__pyx_kp_s_arg_num_wrong_type;
static PyObject *__pyx_kp_s_arg_other_wrong_type;
static PyObject *__pyx_kp_s_arg_resultingPath_wrong_type;
static PyObject *__pyx_kp_s_arg_vertices_wrong_type;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_s_can_not_handle_type_of_s;
static PyObject *__pyx_n_s_chenhancc_WIN;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_faces;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_in_0;
static PyObject *__pyx_n_s_in_1;
static PyObject *__pyx_n_s_in_2;
static PyObject *__pyx_n_s_in_3;
static PyObject *__pyx_n_s_indexOfSourceVerts;
static PyObject *__pyx_n_s_indexOfVert;
static PyObject *__pyx_n_s_init_0;
static PyObject *__pyx_n_s_init_1;
static PyObject *__pyx_n_s_init_2;
static PyObject *__pyx_n_s_init_3;
static PyObject *__pyx_n_s_init_4;
static PyObject *__pyx_n_s_init___locals_genexpr;
static PyObject *__pyx_n_s_inputModel;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_resultingPath;
static PyObject *__pyx_kp_s_self_inst_cannot_be_converted_to;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_vertices;
static void __pyx_pf_13chenhancc_WIN_10CBaseModel___dealloc__(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_10CBaseModel_2__init__(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_9LoadModel_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_9LoadModel_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_4LoadModel(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self, PyObject *__pyx_v_vertices, PyObject *__pyx_v_faces); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_6GetNumOfVerts(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_8GetNumOfFaces(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_10isAValidModel(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_13chenhancc_WIN_5CEdge___dealloc__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftVert___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfLeftVert); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftVert_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightVert___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfRightVert); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightVert_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CEdge_19indexOfOppositeVert___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfOppositeVert); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_19indexOfOppositeVert_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftEdge___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfLeftEdge); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftEdge_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightEdge___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfRightEdge); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightEdge_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CEdge_18indexOfReverseEdge___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfReverseEdge); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_18indexOfReverseEdge_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfFrontFace___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfFrontFace); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_16indexOfFrontFace_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CEdge_6length___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, double __pyx_v_length); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_6length_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CEdge_2__init__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_13chenhancc_WIN_5CFace___dealloc__(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_2_init_0(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_4_init_1(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1, PyObject *__pyx_v_in_2); /* proto */
static int __pyx_pf_13chenhancc_WIN_5CFace_6__init__(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_8setIndices(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1, PyObject *__pyx_v_in_2); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue___dealloc__(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8__init___genexpr(PyObject *__pyx_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_2__init__(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_inputModel, PyObject *__pyx_v_indexOfSourceVerts); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_4GetRootSourceOfVert(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16FindSourceVertex_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_6FindSourceVertex(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, PyObject *__pyx_v_indexOfVert, PyObject *__pyx_v_resultingPath); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8PickShortestPaths(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_10Execute(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_12GetRunTime(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_14GetMemoryCost(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16GetWindowNum(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_18GetMaxLenOfQue(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_20GetNPE(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_22GetDepthOfSequenceTree(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_24HasBeenCompleted(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_26GetVertexDistances(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve___dealloc__(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8__init___genexpr(PyObject *__pyx_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_2__init__(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_inputModel, PyObject *__pyx_v_indexOfSourceVerts); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_4GetRootSourceOfVert(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16FindSourceVertex_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_6FindSourceVertex(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, PyObject *__pyx_v_indexOfVert, PyObject *__pyx_v_resultingPath); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8PickShortestPaths(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_10Execute(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_12GetRunTime(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_14GetMemoryCost(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16GetWindowNum(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_18GetMaxLenOfQue(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_20GetNPE(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_22GetDepthOfSequenceTree(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_24HasBeenCompleted(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_26GetVertexDistances(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_13chenhancc_WIN_8CPoint3D___dealloc__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_8CPoint3D_1x___set__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, double __pyx_v_x); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_1x_2__get__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_8CPoint3D_1y___set__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, double __pyx_v_y); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_1y_2__get__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_8CPoint3D_1z___set__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, double __pyx_v_z); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_1z_2__get__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_2_init_0(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_4_init_1(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_6_init_2(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, double __pyx_v_in_0, double __pyx_v_in_1, double __pyx_v_in_2); /* proto */
static int __pyx_pf_13chenhancc_WIN_8CPoint3D_8__init__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_10Normalize(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_12Len(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_13chenhancc_WIN_11CPreviousCH___dealloc__(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_8__init___genexpr(PyObject *__pyx_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_11CPreviousCH_2__init__(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_inputModel, PyObject *__pyx_v_indexOfSourceVerts); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_4GetRootSourceOfVert(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_16FindSourceVertex_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_6FindSourceVertex(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, PyObject *__pyx_v_indexOfVert, PyObject *__pyx_v_resultingPath); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_8PickShortestPaths(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_10Execute(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_12GetRunTime(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_14GetMemoryCost(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_16GetWindowNum(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_18GetMaxLenOfQue(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_20GetNPE(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_22GetDepthOfSequenceTree(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_24HasBeenCompleted(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_26GetVertexDistances(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_13chenhancc_WIN_10CRichModel___dealloc__(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_10CRichModel_2__init__(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_4Preprocess(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_6GetNumOfEdges(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_8GetNumOfValidDirectedEdges(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_10GetNumOfTotalUndirectedEdges(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_12GetNumOfGenera(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_14GetNumOfIsolated(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_16GetNumOfComponents(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_18GetNumOfBoundries(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_20IsConvexVert(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_22isBoundaryVert(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_24IsClosedModel(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_26IsExtremeEdge(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_28IsStartEdge(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_30HasBeenProcessed(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_9LoadModel_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_9LoadModel_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_32LoadModel(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_vertices, PyObject *__pyx_v_faces); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_34GetNumOfVerts(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_36GetNumOfFaces(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_38isAValidModel(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_40__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_42__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_13chenhancc_WIN_9EdgePoint___dealloc__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_9EdgePoint_5index___set__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_5index_2__get__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_9EdgePoint_10proportion___set__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, double __pyx_v_proportion); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_10proportion_2__get__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_9EdgePoint_8isVertex___set__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_isVertex); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_8isVertex_2__get__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_2_init_0(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_4_init_1(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_6_init_2(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_8_init_3(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_in_0, double __pyx_v_in_1); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_10_init_4(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_in_0, PyObject *__pyx_v_in_1, PyObject *__pyx_v_in_2, double __pyx_v_in_3); /* proto */
static int __pyx_pf_13chenhancc_WIN_9EdgePoint_12__init__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_14Get3DPoint(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_13chenhancc_WIN_12InfoAtVertex___dealloc__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_fParentIsPseudoSource); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_9birthTime___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_birthTime); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_9birthTime_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_13indexOfParent___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_indexOfParent); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_13indexOfParent_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_indexOfRootVertOfParent); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_5level___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_level); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_5level_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_11disUptodate___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, double __pyx_v_disUptodate); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_11disUptodate_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_9entryProp___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, double __pyx_v_entryProp); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_9entryProp_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_2_init_0(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_4_init_1(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_other); /* proto */
static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_6__init__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_13chenhancc_WIN_CBaseModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN_CEdge(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN_CFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN_CICHWithFurtherPriorityQueue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN_CImprovedCHWithEdgeValve(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN_CPoint3D(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN_CPreviousCH(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN_CRichModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN_EdgePoint(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN_InfoAtVertex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct__LoadModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_3___init__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_7___init__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_8_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_10_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_11___init__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_12_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_14_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_15_LoadModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_16_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_17_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;

/* "chenhancc_WIN.pyx":35
 *     cdef shared_ptr[_CBaseModel] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_10CBaseModel_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_10CBaseModel_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_10CBaseModel___dealloc__(((struct __pyx_obj_13chenhancc_WIN_CBaseModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_10CBaseModel___dealloc__(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":36
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":35
 *     cdef shared_ptr[_CBaseModel] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":39
 * 
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CBaseModel()"""
 *         self.inst = shared_ptr[_CBaseModel](new _CBaseModel())
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_10CBaseModel_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CBaseModel_2__init__[] = "Cython signature: void CBaseModel()";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_13chenhancc_WIN_10CBaseModel_2__init__;
#endif
static int __pyx_pw_13chenhancc_WIN_10CBaseModel_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CBaseModel_2__init__(((struct __pyx_obj_13chenhancc_WIN_CBaseModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_10CBaseModel_2__init__(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "chenhancc_WIN.pyx":41
 *     def __init__(self):
 *         """Cython signature: void CBaseModel()"""
 *         self.inst = shared_ptr[_CBaseModel](new _CBaseModel())             # <<<<<<<<<<<<<<
 * 
 *     def LoadModel(self, list vertices , list faces ):
 */
  __pyx_v_self->inst = boost::shared_ptr<CBaseModel> (new CBaseModel());

  /* "chenhancc_WIN.pyx":39
 * 
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CBaseModel()"""
 *         self.inst = shared_ptr[_CBaseModel](new _CBaseModel())
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":43
 *         self.inst = shared_ptr[_CBaseModel](new _CBaseModel())
 * 
 *     def LoadModel(self, list vertices , list faces ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_5LoadModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CBaseModel_4LoadModel[] = "Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)";
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_5LoadModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vertices = 0;
  PyObject *__pyx_v_faces = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("LoadModel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vertices,&__pyx_n_s_faces,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vertices)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_faces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("LoadModel", 1, 2, 2, 1); __PYX_ERR(1, 43, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "LoadModel") < 0)) __PYX_ERR(1, 43, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_vertices = ((PyObject*)values[0]);
    __pyx_v_faces = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("LoadModel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 43, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CBaseModel.LoadModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vertices), (&PyList_Type), 1, "vertices", 1))) __PYX_ERR(1, 43, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_faces), (&PyList_Type), 1, "faces", 1))) __PYX_ERR(1, 43, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CBaseModel_4LoadModel(((struct __pyx_obj_13chenhancc_WIN_CBaseModel *)__pyx_v_self), __pyx_v_vertices, __pyx_v_faces);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_10CBaseModel_9LoadModel_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":45
 *     def LoadModel(self, list vertices , list faces ):
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 */

static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_9LoadModel_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_1_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 45, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_10CBaseModel_9LoadModel_2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_LoadModel_locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CBaseModel.LoadModel.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_10CBaseModel_9LoadModel_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 45, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vertices)) { __Pyx_RaiseClosureNameError("vertices"); __PYX_ERR(1, 45, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vertices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 45, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_vertices; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 45, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_13chenhancc_WIN_CPoint3D); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_10CBaseModel_9LoadModel_5generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":46
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 */

static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_9LoadModel_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_2_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 46, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_10CBaseModel_9LoadModel_5generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_LoadModel_locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 46, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CBaseModel.LoadModel.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_10CBaseModel_9LoadModel_5generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 46, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_faces)) { __Pyx_RaiseClosureNameError("faces"); __PYX_ERR(1, 46, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_faces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 46, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_faces; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 46, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_13chenhancc_WIN_CFace); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":43
 *         self.inst = shared_ptr[_CBaseModel](new _CBaseModel())
 * 
 *     def LoadModel(self, list vertices , list faces ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 */

static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_4LoadModel(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self, PyObject *__pyx_v_vertices, PyObject *__pyx_v_faces) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *__pyx_cur_scope;
  std::vector<CPoint3D>  *__pyx_v_v0;
  struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_item0 = 0;
  std::vector<CFace>  *__pyx_v_v1;
  struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_item1 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<CPoint3D>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  std::vector<CFace>  *__pyx_t_8;
  __Pyx_RefNannySetupContext("LoadModel", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct__LoadModel(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct__LoadModel, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 43, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_vertices = __pyx_v_vertices;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vertices);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vertices);
  __pyx_cur_scope->__pyx_v_faces = __pyx_v_faces;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_faces);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_faces);

  /* "chenhancc_WIN.pyx":45
 *     def LoadModel(self, list vertices , list faces ):
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_vertices;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_13chenhancc_WIN_10CBaseModel_9LoadModel_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_vertices_wrong_type);
      __PYX_ERR(1, 45, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":46
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_faces;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = PyList_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_13chenhancc_WIN_10CBaseModel_9LoadModel_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 46, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_faces_wrong_type);
      __PYX_ERR(1, 46, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":47
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()             # <<<<<<<<<<<<<<
 *         cdef CPoint3D item0
 *         for item0 in vertices:
 */
  try {
    __pyx_t_6 = new std::vector<CPoint3D> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 47, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "chenhancc_WIN.pyx":49
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 *         for item0 in vertices:             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_vertices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 49, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_vertices; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 49, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_13chenhancc_WIN_CPoint3D))))) __PYX_ERR(1, 49, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item0, ((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "chenhancc_WIN.pyx":50
 *         cdef CPoint3D item0
 *         for item0 in vertices:
 *             v0.push_back(deref(item0.inst.get()))             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 *         cdef CFace item1
 */
    try {
      __pyx_v_v0->push_back((*__pyx_v_item0->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 50, __pyx_L1_error)
    }

    /* "chenhancc_WIN.pyx":49
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 *         for item0 in vertices:             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chenhancc_WIN.pyx":51
 *         for item0 in vertices:
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()             # <<<<<<<<<<<<<<
 *         cdef CFace item1
 *         for item1 in faces:
 */
  try {
    __pyx_t_8 = new std::vector<CFace> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 51, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_8;

  /* "chenhancc_WIN.pyx":53
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 *         cdef CFace item1
 *         for item1 in faces:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_faces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 53, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_faces; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 53, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_13chenhancc_WIN_CFace))))) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item1, ((struct __pyx_obj_13chenhancc_WIN_CFace *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "chenhancc_WIN.pyx":54
 *         cdef CFace item1
 *         for item1 in faces:
 *             v1.push_back(deref(item1.inst.get()))             # <<<<<<<<<<<<<<
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 *         del v1
 */
    try {
      __pyx_v_v1->push_back((*__pyx_v_item1->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 54, __pyx_L1_error)
    }

    /* "chenhancc_WIN.pyx":53
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 *         cdef CFace item1
 *         for item1 in faces:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chenhancc_WIN.pyx":55
 *         for item1 in faces:
 *             v1.push_back(deref(item1.inst.get()))
 *         self.inst.get().LoadModel(deref(v0), deref(v1))             # <<<<<<<<<<<<<<
 *         del v1
 *         del v0
 */
  __pyx_v_self->inst.get()->LoadModel((*__pyx_v_v0), (*__pyx_v_v1));

  /* "chenhancc_WIN.pyx":56
 *             v1.push_back(deref(item1.inst.get()))
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 *         del v1             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  delete __pyx_v_v1;

  /* "chenhancc_WIN.pyx":57
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 *         del v1
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfVerts(self):
 */
  delete __pyx_v_v0;

  /* "chenhancc_WIN.pyx":43
 *         self.inst = shared_ptr[_CBaseModel](new _CBaseModel())
 * 
 *     def LoadModel(self, list vertices , list faces ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CBaseModel.LoadModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0);
  __Pyx_XDECREF((PyObject *)__pyx_v_item1);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":59
 *         del v0
 * 
 *     def GetNumOfVerts(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfVerts()"""
 *         cdef int _r = self.inst.get().GetNumOfVerts()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_7GetNumOfVerts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CBaseModel_6GetNumOfVerts[] = "Cython signature: int GetNumOfVerts()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_7GetNumOfVerts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfVerts (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CBaseModel_6GetNumOfVerts(((struct __pyx_obj_13chenhancc_WIN_CBaseModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_6GetNumOfVerts(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfVerts", 0);

  /* "chenhancc_WIN.pyx":61
 *     def GetNumOfVerts(self):
 *         """Cython signature: int GetNumOfVerts()"""
 *         cdef int _r = self.inst.get().GetNumOfVerts()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfVerts();

  /* "chenhancc_WIN.pyx":62
 *         """Cython signature: int GetNumOfVerts()"""
 *         cdef int _r = self.inst.get().GetNumOfVerts()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":63
 *         cdef int _r = self.inst.get().GetNumOfVerts()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfFaces(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":59
 *         del v0
 * 
 *     def GetNumOfVerts(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfVerts()"""
 *         cdef int _r = self.inst.get().GetNumOfVerts()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CBaseModel.GetNumOfVerts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":65
 *         return py_result
 * 
 *     def GetNumOfFaces(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfFaces()"""
 *         cdef int _r = self.inst.get().GetNumOfFaces()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_9GetNumOfFaces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CBaseModel_8GetNumOfFaces[] = "Cython signature: int GetNumOfFaces()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_9GetNumOfFaces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfFaces (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CBaseModel_8GetNumOfFaces(((struct __pyx_obj_13chenhancc_WIN_CBaseModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_8GetNumOfFaces(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfFaces", 0);

  /* "chenhancc_WIN.pyx":67
 *     def GetNumOfFaces(self):
 *         """Cython signature: int GetNumOfFaces()"""
 *         cdef int _r = self.inst.get().GetNumOfFaces()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfFaces();

  /* "chenhancc_WIN.pyx":68
 *         """Cython signature: int GetNumOfFaces()"""
 *         cdef int _r = self.inst.get().GetNumOfFaces()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":69
 *         cdef int _r = self.inst.get().GetNumOfFaces()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def isAValidModel(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":65
 *         return py_result
 * 
 *     def GetNumOfFaces(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfFaces()"""
 *         cdef int _r = self.inst.get().GetNumOfFaces()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CBaseModel.GetNumOfFaces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":71
 *         return py_result
 * 
 *     def isAValidModel(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool isAValidModel()"""
 *         cdef bool _r = self.inst.get().isAValidModel()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_11isAValidModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CBaseModel_10isAValidModel[] = "Cython signature: bool isAValidModel()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_11isAValidModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isAValidModel (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CBaseModel_10isAValidModel(((struct __pyx_obj_13chenhancc_WIN_CBaseModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_10isAValidModel(struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isAValidModel", 0);

  /* "chenhancc_WIN.pyx":73
 *     def isAValidModel(self):
 *         """Cython signature: bool isAValidModel()"""
 *         cdef bool _r = self.inst.get().isAValidModel()             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->isAValidModel();

  /* "chenhancc_WIN.pyx":74
 *         """Cython signature: bool isAValidModel()"""
 *         cdef bool _r = self.inst.get().isAValidModel()
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":75
 *         cdef bool _r = self.inst.get().isAValidModel()
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class CEdge:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":71
 *         return py_result
 * 
 *     def isAValidModel(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool isAValidModel()"""
 *         cdef bool _r = self.inst.get().isAValidModel()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CBaseModel.isAValidModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CBaseModel_12__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_CBaseModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CBaseModel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_10CBaseModel_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CBaseModel_14__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_CBaseModel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CBaseModel_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CBaseModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CBaseModel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":81
 *     cdef shared_ptr[_CEdge] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_5CEdge_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_5CEdge_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_5CEdge___dealloc__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_5CEdge___dealloc__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":82
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":81
 *     cdef shared_ptr[_CEdge] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":86
 * 
 *     property indexOfLeftVert:
 *         def __set__(self,  indexOfLeftVert):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfLeftVert = (<int>indexOfLeftVert)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftVert_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfLeftVert); /*proto*/
static int __pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftVert_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfLeftVert) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftVert___set__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self), ((PyObject *)__pyx_v_indexOfLeftVert));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftVert___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfLeftVert) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":88
 *         def __set__(self,  indexOfLeftVert):
 * 
 *             self.inst.get().indexOfLeftVert = (<int>indexOfLeftVert)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_indexOfLeftVert); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 88, __pyx_L1_error)
  __pyx_v_self->inst.get()->indexOfLeftVert = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":86
 * 
 *     property indexOfLeftVert:
 *         def __set__(self,  indexOfLeftVert):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfLeftVert = (<int>indexOfLeftVert)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfLeftVert.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":91
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfLeftVert
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftVert_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftVert_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftVert_2__get__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftVert_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":92
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfLeftVert             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->indexOfLeftVert;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":93
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfLeftVert
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":94
 *             cdef int _r = self.inst.get().indexOfLeftVert
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property indexOfRightVert:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":91
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfLeftVert
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfLeftVert.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":97
 * 
 *     property indexOfRightVert:
 *         def __set__(self,  indexOfRightVert):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfRightVert = (<int>indexOfRightVert)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightVert_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfRightVert); /*proto*/
static int __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightVert_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfRightVert) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightVert___set__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self), ((PyObject *)__pyx_v_indexOfRightVert));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightVert___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfRightVert) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":99
 *         def __set__(self,  indexOfRightVert):
 * 
 *             self.inst.get().indexOfRightVert = (<int>indexOfRightVert)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_indexOfRightVert); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 99, __pyx_L1_error)
  __pyx_v_self->inst.get()->indexOfRightVert = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":97
 * 
 *     property indexOfRightVert:
 *         def __set__(self,  indexOfRightVert):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfRightVert = (<int>indexOfRightVert)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfRightVert.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":102
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfRightVert
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightVert_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightVert_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightVert_2__get__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightVert_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":103
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfRightVert             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->indexOfRightVert;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":104
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfRightVert
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":105
 *             cdef int _r = self.inst.get().indexOfRightVert
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property indexOfOppositeVert:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":102
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfRightVert
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfRightVert.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":108
 * 
 *     property indexOfOppositeVert:
 *         def __set__(self,  indexOfOppositeVert):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfOppositeVert = (<int>indexOfOppositeVert)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CEdge_19indexOfOppositeVert_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfOppositeVert); /*proto*/
static int __pyx_pw_13chenhancc_WIN_5CEdge_19indexOfOppositeVert_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfOppositeVert) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_19indexOfOppositeVert___set__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self), ((PyObject *)__pyx_v_indexOfOppositeVert));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CEdge_19indexOfOppositeVert___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfOppositeVert) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":110
 *         def __set__(self,  indexOfOppositeVert):
 * 
 *             self.inst.get().indexOfOppositeVert = (<int>indexOfOppositeVert)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_indexOfOppositeVert); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 110, __pyx_L1_error)
  __pyx_v_self->inst.get()->indexOfOppositeVert = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":108
 * 
 *     property indexOfOppositeVert:
 *         def __set__(self,  indexOfOppositeVert):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfOppositeVert = (<int>indexOfOppositeVert)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfOppositeVert.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":113
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfOppositeVert
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_19indexOfOppositeVert_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_19indexOfOppositeVert_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_19indexOfOppositeVert_2__get__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_19indexOfOppositeVert_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":114
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfOppositeVert             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->indexOfOppositeVert;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":115
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfOppositeVert
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":116
 *             cdef int _r = self.inst.get().indexOfOppositeVert
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property indexOfLeftEdge:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":113
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfOppositeVert
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfOppositeVert.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":119
 * 
 *     property indexOfLeftEdge:
 *         def __set__(self,  indexOfLeftEdge):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfLeftEdge = (<int>indexOfLeftEdge)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftEdge_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfLeftEdge); /*proto*/
static int __pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftEdge_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfLeftEdge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftEdge___set__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self), ((PyObject *)__pyx_v_indexOfLeftEdge));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftEdge___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfLeftEdge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":121
 *         def __set__(self,  indexOfLeftEdge):
 * 
 *             self.inst.get().indexOfLeftEdge = (<int>indexOfLeftEdge)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_indexOfLeftEdge); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 121, __pyx_L1_error)
  __pyx_v_self->inst.get()->indexOfLeftEdge = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":119
 * 
 *     property indexOfLeftEdge:
 *         def __set__(self,  indexOfLeftEdge):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfLeftEdge = (<int>indexOfLeftEdge)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfLeftEdge.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":124
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfLeftEdge
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftEdge_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftEdge_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftEdge_2__get__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_15indexOfLeftEdge_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":125
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfLeftEdge             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->indexOfLeftEdge;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":126
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfLeftEdge
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":127
 *             cdef int _r = self.inst.get().indexOfLeftEdge
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property indexOfRightEdge:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":124
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfLeftEdge
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfLeftEdge.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":130
 * 
 *     property indexOfRightEdge:
 *         def __set__(self,  indexOfRightEdge):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfRightEdge = (<int>indexOfRightEdge)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightEdge_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfRightEdge); /*proto*/
static int __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightEdge_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfRightEdge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightEdge___set__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self), ((PyObject *)__pyx_v_indexOfRightEdge));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightEdge___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfRightEdge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":132
 *         def __set__(self,  indexOfRightEdge):
 * 
 *             self.inst.get().indexOfRightEdge = (<int>indexOfRightEdge)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_indexOfRightEdge); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 132, __pyx_L1_error)
  __pyx_v_self->inst.get()->indexOfRightEdge = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":130
 * 
 *     property indexOfRightEdge:
 *         def __set__(self,  indexOfRightEdge):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfRightEdge = (<int>indexOfRightEdge)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfRightEdge.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":135
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfRightEdge
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightEdge_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightEdge_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightEdge_2__get__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_16indexOfRightEdge_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":136
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfRightEdge             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->indexOfRightEdge;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":137
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfRightEdge
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":138
 *             cdef int _r = self.inst.get().indexOfRightEdge
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property indexOfReverseEdge:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":135
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfRightEdge
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfRightEdge.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":141
 * 
 *     property indexOfReverseEdge:
 *         def __set__(self,  indexOfReverseEdge):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfReverseEdge = (<int>indexOfReverseEdge)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CEdge_18indexOfReverseEdge_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfReverseEdge); /*proto*/
static int __pyx_pw_13chenhancc_WIN_5CEdge_18indexOfReverseEdge_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfReverseEdge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_18indexOfReverseEdge___set__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self), ((PyObject *)__pyx_v_indexOfReverseEdge));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CEdge_18indexOfReverseEdge___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfReverseEdge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":143
 *         def __set__(self,  indexOfReverseEdge):
 * 
 *             self.inst.get().indexOfReverseEdge = (<int>indexOfReverseEdge)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_indexOfReverseEdge); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 143, __pyx_L1_error)
  __pyx_v_self->inst.get()->indexOfReverseEdge = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":141
 * 
 *     property indexOfReverseEdge:
 *         def __set__(self,  indexOfReverseEdge):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfReverseEdge = (<int>indexOfReverseEdge)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfReverseEdge.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":146
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfReverseEdge
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_18indexOfReverseEdge_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_18indexOfReverseEdge_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_18indexOfReverseEdge_2__get__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_18indexOfReverseEdge_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":147
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfReverseEdge             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->indexOfReverseEdge;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":148
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfReverseEdge
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":149
 *             cdef int _r = self.inst.get().indexOfReverseEdge
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property indexOfFrontFace:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":146
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfReverseEdge
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfReverseEdge.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":152
 * 
 *     property indexOfFrontFace:
 *         def __set__(self,  indexOfFrontFace):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfFrontFace = (<int>indexOfFrontFace)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfFrontFace_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfFrontFace); /*proto*/
static int __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfFrontFace_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfFrontFace) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfFrontFace___set__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self), ((PyObject *)__pyx_v_indexOfFrontFace));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfFrontFace___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, PyObject *__pyx_v_indexOfFrontFace) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":154
 *         def __set__(self,  indexOfFrontFace):
 * 
 *             self.inst.get().indexOfFrontFace = (<int>indexOfFrontFace)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_indexOfFrontFace); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 154, __pyx_L1_error)
  __pyx_v_self->inst.get()->indexOfFrontFace = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":152
 * 
 *     property indexOfFrontFace:
 *         def __set__(self,  indexOfFrontFace):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfFrontFace = (<int>indexOfFrontFace)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfFrontFace.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":157
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfFrontFace
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_16indexOfFrontFace_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_16indexOfFrontFace_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_16indexOfFrontFace_2__get__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_16indexOfFrontFace_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":158
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfFrontFace             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->indexOfFrontFace;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":159
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfFrontFace
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":160
 *             cdef int _r = self.inst.get().indexOfFrontFace
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property length:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":157
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfFrontFace
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.indexOfFrontFace.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":163
 * 
 *     property length:
 *         def __set__(self, double length):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().length = (<double>length)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CEdge_6length_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_length); /*proto*/
static int __pyx_pw_13chenhancc_WIN_5CEdge_6length_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_length) {
  double __pyx_v_length;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_length); {
    __pyx_v_length = __pyx_PyFloat_AsDouble(__pyx_arg_length); if (unlikely((__pyx_v_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 163, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.length.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_6length___set__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self), ((double)__pyx_v_length));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CEdge_6length___set__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, double __pyx_v_length) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":165
 *         def __set__(self, double length):
 * 
 *             self.inst.get().length = (<double>length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->length = ((double)__pyx_v_length);

  /* "chenhancc_WIN.pyx":163
 * 
 *     property length:
 *         def __set__(self, double length):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().length = (<double>length)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":168
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().length
 *             py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_6length_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_6length_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_6length_2__get__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_6length_2__get__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":169
 * 
 *         def __get__(self):
 *             cdef double _r = self.inst.get().length             # <<<<<<<<<<<<<<
 *             py_result = <double>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->length;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":170
 *         def __get__(self):
 *             cdef double _r = self.inst.get().length
 *             py_result = <double>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":171
 *             cdef double _r = self.inst.get().length
 *             py_result = <double>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":168
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().length
 *             py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":173
 *             return py_result
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CEdge()"""
 *         self.inst = shared_ptr[_CEdge](new _CEdge())
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CEdge_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_5CEdge_2__init__[] = "Cython signature: void CEdge()";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_13chenhancc_WIN_5CEdge_2__init__;
#endif
static int __pyx_pw_13chenhancc_WIN_5CEdge_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_2__init__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CEdge_2__init__(struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "chenhancc_WIN.pyx":175
 *     def __init__(self):
 *         """Cython signature: void CEdge()"""
 *         self.inst = shared_ptr[_CEdge](new _CEdge())             # <<<<<<<<<<<<<<
 * 
 * cdef class CFace:
 */
  __pyx_v_self->inst = boost::shared_ptr<CEdge> (new CEdge());

  /* "chenhancc_WIN.pyx":173
 *             return py_result
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CEdge()"""
 *         self.inst = shared_ptr[_CEdge](new _CEdge())
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_4__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CEdge_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CEdge_6__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_CEdge *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CEdge_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CEdge *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CEdge.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":181
 *     cdef shared_ptr[_CFace] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_5CFace_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_5CFace_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_5CFace___dealloc__(((struct __pyx_obj_13chenhancc_WIN_CFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_5CFace___dealloc__(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":182
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":181
 *     cdef shared_ptr[_CFace] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":185
 * 
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CFace()"""
 *         self.inst = shared_ptr[_CFace](new _CFace())
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_5CFace_2_init_0[] = "Cython signature: void CFace()";
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CFace_2_init_0(((struct __pyx_obj_13chenhancc_WIN_CFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_2_init_0(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* "chenhancc_WIN.pyx":187
 *     def _init_0(self):
 *         """Cython signature: void CFace()"""
 *         self.inst = shared_ptr[_CFace](new _CFace())             # <<<<<<<<<<<<<<
 * 
 *     def _init_1(self,  in_0 ,  in_1 ,  in_2 ):
 */
  __pyx_v_self->inst = boost::shared_ptr<CFace> (new CFace());

  /* "chenhancc_WIN.pyx":185
 * 
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CFace()"""
 *         self.inst = shared_ptr[_CFace](new _CFace())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":189
 *         self.inst = shared_ptr[_CFace](new _CFace())
 * 
 *     def _init_1(self,  in_0 ,  in_1 ,  in_2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CFace(int, int, int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_5CFace_4_init_1[] = "Cython signature: void CFace(int, int, int)";
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_0 = 0;
  PyObject *__pyx_v_in_1 = 0;
  PyObject *__pyx_v_in_2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,&__pyx_n_s_in_2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_1", 1, 3, 3, 1); __PYX_ERR(1, 189, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_1", 1, 3, 3, 2); __PYX_ERR(1, 189, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_1") < 0)) __PYX_ERR(1, 189, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_in_0 = values[0];
    __pyx_v_in_1 = values[1];
    __pyx_v_in_2 = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_1", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 189, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CFace._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CFace_4_init_1(((struct __pyx_obj_13chenhancc_WIN_CFace *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1, __pyx_v_in_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_4_init_1(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1, PyObject *__pyx_v_in_2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "chenhancc_WIN.pyx":191
 *     def _init_1(self,  in_0 ,  in_1 ,  in_2 ):
 *         """Cython signature: void CFace(int, int, int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 191, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":192
 *         """Cython signature: void CFace(int, int, int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_1); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_1); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_1_wrong_type);
      __PYX_ERR(1, 192, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":193
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_2); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_2); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_2_wrong_type);
      __PYX_ERR(1, 193, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":197
 * 
 * 
 *         self.inst = shared_ptr[_CFace](new _CFace((<int>in_0), (<int>in_1), (<int>in_2)))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args , **kwargs):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 197, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_in_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 197, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_in_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 197, __pyx_L1_error)
  __pyx_v_self->inst = boost::shared_ptr<CFace> (new CFace(((int)__pyx_t_4), ((int)__pyx_t_5), ((int)__pyx_t_6)));

  /* "chenhancc_WIN.pyx":189
 *         self.inst = shared_ptr[_CFace](new _CFace())
 * 
 *     def _init_1(self,  in_0 ,  in_1 ,  in_2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CFace(int, int, int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CFace._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":199
 *         self.inst = shared_ptr[_CFace](new _CFace((<int>in_0), (<int>in_1), (<int>in_2)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_5CFace_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13chenhancc_WIN_5CFace_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CFace_6__init__(((struct __pyx_obj_13chenhancc_WIN_CFace *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_5CFace_6__init__(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "chenhancc_WIN.pyx":200
 * 
 *     def __init__(self, *args , **kwargs):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], (int, long))) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))):
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":201
 *     def __init__(self, *args , **kwargs):
 *         if not args:
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==3) and (isinstance(args[0], (int, long))) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))):
 *              self._init_1(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":200
 * 
 *     def __init__(self, *args , **kwargs):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], (int, long))) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))):
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":202
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], (int, long))) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 202, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 == 3) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_7 = PyLong_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_7 != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L7_bool_binop_done:;
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 1);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 1);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_7 = PyLong_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  __pyx_t_6 = __pyx_t_1;
  __pyx_L10_bool_binop_done:;
  __pyx_t_1 = (__pyx_t_6 != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 2);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 2);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_7 = PyLong_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_7 != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L12_bool_binop_done:;
  __pyx_t_6 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":203
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], (int, long))) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "chenhancc_WIN.pyx":202
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==3) and (isinstance(args[0], (int, long))) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":205
 *              self._init_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def setIndices(self,  in_0 ,  in_1 ,  in_2 ):
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_args);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 205, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "chenhancc_WIN.pyx":199
 *         self.inst = shared_ptr[_CFace](new _CFace((<int>in_0), (<int>in_1), (<int>in_2)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chenhancc_WIN.CFace.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":207
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def setIndices(self,  in_0 ,  in_1 ,  in_2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void setIndices(int, int, int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_9setIndices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_5CFace_8setIndices[] = "Cython signature: void setIndices(int, int, int)";
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_9setIndices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_0 = 0;
  PyObject *__pyx_v_in_1 = 0;
  PyObject *__pyx_v_in_2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIndices (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,&__pyx_n_s_in_2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setIndices", 1, 3, 3, 1); __PYX_ERR(1, 207, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setIndices", 1, 3, 3, 2); __PYX_ERR(1, 207, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setIndices") < 0)) __PYX_ERR(1, 207, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_in_0 = values[0];
    __pyx_v_in_1 = values[1];
    __pyx_v_in_2 = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setIndices", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 207, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CFace.setIndices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CFace_8setIndices(((struct __pyx_obj_13chenhancc_WIN_CFace *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1, __pyx_v_in_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_8setIndices(struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_in_1, PyObject *__pyx_v_in_2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("setIndices", 0);

  /* "chenhancc_WIN.pyx":209
 *     def setIndices(self,  in_0 ,  in_1 ,  in_2 ):
 *         """Cython signature: void setIndices(int, int, int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 209, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":210
 *         """Cython signature: void setIndices(int, int, int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_1); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_1); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_1_wrong_type);
      __PYX_ERR(1, 210, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":211
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_2); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_2); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_2_wrong_type);
      __PYX_ERR(1, 211, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":215
 * 
 * 
 *         self.inst.get().setIndices((<int>in_0), (<int>in_1), (<int>in_2))             # <<<<<<<<<<<<<<
 * 
 * cdef class CICHWithFurtherPriorityQueue:
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 215, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_in_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 215, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_in_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 215, __pyx_L1_error)
  __pyx_v_self->inst.get()->setIndices(((int)__pyx_t_4), ((int)__pyx_t_5), ((int)__pyx_t_6));

  /* "chenhancc_WIN.pyx":207
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def setIndices(self,  in_0 ,  in_1 ,  in_2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void setIndices(int, int, int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CFace.setIndices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CFace_10__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_CFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_5CFace_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_5CFace_12__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_CFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_5CFace_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":221
 *     cdef shared_ptr[_CICHWithFurtherPriorityQueue] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue___dealloc__(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue___dealloc__(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":222
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":221
 *     cdef shared_ptr[_CICHWithFurtherPriorityQueue] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":225
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CICHWithFurtherPriorityQueue(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_2__init__[] = "Cython signature: void CICHWithFurtherPriorityQueue(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_2__init__;
#endif
static int __pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_inputModel = 0;
  PyObject *__pyx_v_indexOfSourceVerts = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inputModel,&__pyx_n_s_indexOfSourceVerts,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inputModel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indexOfSourceVerts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(1, 225, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 225, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_inputModel = ((struct __pyx_obj_13chenhancc_WIN_CRichModel *)values[0]);
    __pyx_v_indexOfSourceVerts = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inputModel), __pyx_ptype_13chenhancc_WIN_CRichModel, 1, "inputModel", 0))) __PYX_ERR(1, 225, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_indexOfSourceVerts), (&PySet_Type), 1, "indexOfSourceVerts", 1))) __PYX_ERR(1, 225, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_2__init__(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self), __pyx_v_inputModel, __pyx_v_indexOfSourceVerts);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8__init___2generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":228
 *         """Cython signature: void CICHWithFurtherPriorityQueue(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 */

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8__init___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_4_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 228, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8__init___2generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init___locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.__init__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8__init___2generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *(*__pyx_t_2)(PyObject *);
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 228, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_indexOfSourceVerts)) { __Pyx_RaiseClosureNameError("indexOfSourceVerts"); __PYX_ERR(1, 228, __pyx_L1_error) }
  __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_indexOfSourceVerts); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  for (;;) {
    {
      __pyx_t_3 = __pyx_t_2(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 228, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_li);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_li, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_5 = PyInt_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = PyLong_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L7_bool_binop_done:;
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":225
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CICHWithFurtherPriorityQueue(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */

static int __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_2__init__(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_inputModel, PyObject *__pyx_v_indexOfSourceVerts) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *__pyx_cur_scope;
  std::set<int>  __pyx_v_v1;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::set<int>  __pyx_t_6;
  CICHWithFurtherPriorityQueue *__pyx_t_7;
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_3___init__(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_3___init__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 225, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_indexOfSourceVerts = __pyx_v_indexOfSourceVerts;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_indexOfSourceVerts);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_indexOfSourceVerts);

  /* "chenhancc_WIN.pyx":227
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):
 *         """Cython signature: void CICHWithFurtherPriorityQueue(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_inputModel), __pyx_ptype_13chenhancc_WIN_CRichModel); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_inputModel_wrong_type);
      __PYX_ERR(1, 227, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":228
 *         """Cython signature: void CICHWithFurtherPriorityQueue(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_indexOfSourceVerts;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PySet_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8__init___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_indexOfSourceVerts_wrong_typ);
      __PYX_ERR(1, 228, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":230
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_CICHWithFurtherPriorityQueue](new _CICHWithFurtherPriorityQueue((deref(inputModel.inst.get())), v1))
 * 
 */
  __pyx_t_6 = __pyx_convert_set_from_py_int(__pyx_cur_scope->__pyx_v_indexOfSourceVerts); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 230, __pyx_L1_error)
  __pyx_v_v1 = __pyx_t_6;

  /* "chenhancc_WIN.pyx":231
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 *         self.inst = shared_ptr[_CICHWithFurtherPriorityQueue](new _CICHWithFurtherPriorityQueue((deref(inputModel.inst.get())), v1))             # <<<<<<<<<<<<<<
 * 
 *     def GetRootSourceOfVert(self,  index ):
 */
  try {
    __pyx_t_7 = new CICHWithFurtherPriorityQueue((*__pyx_v_inputModel->inst.get()), __pyx_v_v1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 231, __pyx_L1_error)
  }
  __pyx_v_self->inst = boost::shared_ptr<CICHWithFurtherPriorityQueue> (__pyx_t_7);

  /* "chenhancc_WIN.pyx":225
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CICHWithFurtherPriorityQueue(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":233
 *         self.inst = shared_ptr[_CICHWithFurtherPriorityQueue](new _CICHWithFurtherPriorityQueue((deref(inputModel.inst.get())), v1))
 * 
 *     def GetRootSourceOfVert(self,  index ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetRootSourceOfVert(int index)"""
 *         assert isinstance(index, (int, long)), 'arg index wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_5GetRootSourceOfVert(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_4GetRootSourceOfVert[] = "Cython signature: int GetRootSourceOfVert(int index)";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_5GetRootSourceOfVert(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetRootSourceOfVert (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_4GetRootSourceOfVert(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_4GetRootSourceOfVert(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("GetRootSourceOfVert", 0);

  /* "chenhancc_WIN.pyx":235
 *     def GetRootSourceOfVert(self,  index ):
 *         """Cython signature: int GetRootSourceOfVert(int index)"""
 *         assert isinstance(index, (int, long)), 'arg index wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_index); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_index); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_index_wrong_type);
      __PYX_ERR(1, 235, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":237
 *         assert isinstance(index, (int, long)), 'arg index wrong type'
 * 
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 237, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->GetRootSourceOfVert(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":238
 * 
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":239
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":233
 *         self.inst = shared_ptr[_CICHWithFurtherPriorityQueue](new _CICHWithFurtherPriorityQueue((deref(inputModel.inst.get())), v1))
 * 
 *     def GetRootSourceOfVert(self,  index ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetRootSourceOfVert(int index)"""
 *         assert isinstance(index, (int, long)), 'arg index wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.GetRootSourceOfVert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":241
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_7FindSourceVertex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_6FindSourceVertex[] = "Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_7FindSourceVertex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_indexOfVert = 0;
  PyObject *__pyx_v_resultingPath = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FindSourceVertex (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_indexOfVert,&__pyx_n_s_resultingPath,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indexOfVert)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resultingPath)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FindSourceVertex", 1, 2, 2, 1); __PYX_ERR(1, 241, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "FindSourceVertex") < 0)) __PYX_ERR(1, 241, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_indexOfVert = values[0];
    __pyx_v_resultingPath = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FindSourceVertex", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 241, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.FindSourceVertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_resultingPath), (&PyList_Type), 1, "resultingPath", 1))) __PYX_ERR(1, 241, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_6FindSourceVertex(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self), __pyx_v_indexOfVert, __pyx_v_resultingPath);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16FindSourceVertex_2generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":244
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 */

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16FindSourceVertex_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_6_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 244, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16FindSourceVertex_2generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_FindSourceVertex_locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.FindSourceVertex.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16FindSourceVertex_2generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 244, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_resultingPath)) { __Pyx_RaiseClosureNameError("resultingPath"); __PYX_ERR(1, 244, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_resultingPath == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 244, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_resultingPath; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 244, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_13chenhancc_WIN_EdgePoint); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":241
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_6FindSourceVertex(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, PyObject *__pyx_v_indexOfVert, PyObject *__pyx_v_resultingPath) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *__pyx_cur_scope;
  std::vector<EdgePoint>  *__pyx_v_v1;
  struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_item1 = 0;
  std::vector<EdgePoint>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::vector<EdgePoint> ::iterator __pyx_v_it__r;
  struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_item_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<EdgePoint>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("FindSourceVertex", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 241, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_resultingPath = __pyx_v_resultingPath;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_resultingPath);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_resultingPath);

  /* "chenhancc_WIN.pyx":243
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_indexOfVert); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_indexOfVert); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_indexOfVert_wrong_type);
      __PYX_ERR(1, 243, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":244
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_resultingPath;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16FindSourceVertex_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_resultingPath_wrong_type);
      __PYX_ERR(1, 244, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":246
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()             # <<<<<<<<<<<<<<
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:
 */
  try {
    __pyx_t_6 = new std::vector<EdgePoint> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 246, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_6;

  /* "chenhancc_WIN.pyx":248
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_resultingPath == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 248, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_resultingPath; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 248, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_13chenhancc_WIN_EdgePoint))))) __PYX_ERR(1, 248, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item1, ((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":249
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:
 *             v1.push_back(deref(item1.inst.get()))             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 *         del v1
 */
    try {
      __pyx_v_v1->push_back((*__pyx_v_item1->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 249, __pyx_L1_error)
    }

    /* "chenhancc_WIN.pyx":248
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chenhancc_WIN.pyx":250
 *         for item1 in resultingPath:
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))             # <<<<<<<<<<<<<<
 *         del v1
 *         py_result = []
 */
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_indexOfVert); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 250, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->FindSourceVertex(((int)__pyx_t_8), (*__pyx_v_v1));

  /* "chenhancc_WIN.pyx":251
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 *         del v1             # <<<<<<<<<<<<<<
 *         py_result = []
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()
 */
  delete __pyx_v_v1;

  /* "chenhancc_WIN.pyx":252
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 *         del v1
 *         py_result = []             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()
 *         cdef EdgePoint item_py_result
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "chenhancc_WIN.pyx":253
 *         del v1
 *         py_result = []
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         cdef EdgePoint item_py_result
 *         while it__r != _r.end():
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "chenhancc_WIN.pyx":255
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()
 *         cdef EdgePoint item_py_result
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            item_py_result = EdgePoint.__new__(EdgePoint)
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "chenhancc_WIN.pyx":256
 *         cdef EdgePoint item_py_result
 *         while it__r != _r.end():
 *            item_py_result = EdgePoint.__new__(EdgePoint)             # <<<<<<<<<<<<<<
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 *            py_result.append(item_py_result)
 */
    __pyx_t_5 = __pyx_tp_new_13chenhancc_WIN_EdgePoint(((PyTypeObject *)__pyx_ptype_13chenhancc_WIN_EdgePoint), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_13chenhancc_WIN_EdgePoint)))) __PYX_ERR(1, 256, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item_py_result, ((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "chenhancc_WIN.pyx":257
 *         while it__r != _r.end():
 *            item_py_result = EdgePoint.__new__(EdgePoint)
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))             # <<<<<<<<<<<<<<
 *            py_result.append(item_py_result)
 *            inc(it__r)
 */
    __pyx_v_item_py_result->inst = boost::shared_ptr<EdgePoint> (new EdgePoint((*__pyx_v_it__r)));

    /* "chenhancc_WIN.pyx":258
 *            item_py_result = EdgePoint.__new__(EdgePoint)
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 *            py_result.append(item_py_result)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_py_result, ((PyObject *)__pyx_v_item_py_result)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(1, 258, __pyx_L1_error)

    /* "chenhancc_WIN.pyx":259
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 *            py_result.append(item_py_result)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (++__pyx_v_it__r);
  }

  /* "chenhancc_WIN.pyx":260
 *            py_result.append(item_py_result)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def PickShortestPaths(self,  num ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":241
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.FindSourceVertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item1);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":262
 *         return py_result
 * 
 *     def PickShortestPaths(self,  num ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void PickShortestPaths(int num)"""
 *         assert isinstance(num, (int, long)), 'arg num wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_9PickShortestPaths(PyObject *__pyx_v_self, PyObject *__pyx_v_num); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8PickShortestPaths[] = "Cython signature: void PickShortestPaths(int num)";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_9PickShortestPaths(PyObject *__pyx_v_self, PyObject *__pyx_v_num) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PickShortestPaths (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8PickShortestPaths(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self), ((PyObject *)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8PickShortestPaths(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, PyObject *__pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("PickShortestPaths", 0);

  /* "chenhancc_WIN.pyx":264
 *     def PickShortestPaths(self,  num ):
 *         """Cython signature: void PickShortestPaths(int num)"""
 *         assert isinstance(num, (int, long)), 'arg num wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().PickShortestPaths((<int>num))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_num); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_num); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_num_wrong_type);
      __PYX_ERR(1, 264, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":266
 *         assert isinstance(num, (int, long)), 'arg num wrong type'
 * 
 *         self.inst.get().PickShortestPaths((<int>num))             # <<<<<<<<<<<<<<
 * 
 *     def Execute(self):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_num); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 266, __pyx_L1_error)
  __pyx_v_self->inst.get()->PickShortestPaths(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":262
 *         return py_result
 * 
 *     def PickShortestPaths(self,  num ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void PickShortestPaths(int num)"""
 *         assert isinstance(num, (int, long)), 'arg num wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.PickShortestPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":268
 *         self.inst.get().PickShortestPaths((<int>num))
 * 
 *     def Execute(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Execute()"""
 *         self.inst.get().Execute()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_11Execute(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_10Execute[] = "Cython signature: void Execute()";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_11Execute(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Execute (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_10Execute(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_10Execute(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Execute", 0);

  /* "chenhancc_WIN.pyx":270
 *     def Execute(self):
 *         """Cython signature: void Execute()"""
 *         self.inst.get().Execute()             # <<<<<<<<<<<<<<
 * 
 *     def GetRunTime(self):
 */
  __pyx_v_self->inst.get()->Execute();

  /* "chenhancc_WIN.pyx":268
 *         self.inst.get().PickShortestPaths((<int>num))
 * 
 *     def Execute(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Execute()"""
 *         self.inst.get().Execute()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":272
 *         self.inst.get().Execute()
 * 
 *     def GetRunTime(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_13GetRunTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_12GetRunTime[] = "Cython signature: double GetRunTime()";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_13GetRunTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetRunTime (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_12GetRunTime(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_12GetRunTime(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetRunTime", 0);

  /* "chenhancc_WIN.pyx":274
 *     def GetRunTime(self):
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetRunTime();

  /* "chenhancc_WIN.pyx":275
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":276
 *         cdef double _r = self.inst.get().GetRunTime()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetMemoryCost(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":272
 *         self.inst.get().Execute()
 * 
 *     def GetRunTime(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.GetRunTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":278
 *         return py_result
 * 
 *     def GetMemoryCost(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_15GetMemoryCost(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_14GetMemoryCost[] = "Cython signature: double GetMemoryCost()";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_15GetMemoryCost(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetMemoryCost (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_14GetMemoryCost(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_14GetMemoryCost(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetMemoryCost", 0);

  /* "chenhancc_WIN.pyx":280
 *     def GetMemoryCost(self):
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetMemoryCost();

  /* "chenhancc_WIN.pyx":281
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":282
 *         cdef double _r = self.inst.get().GetMemoryCost()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetWindowNum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":278
 *         return py_result
 * 
 *     def GetMemoryCost(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.GetMemoryCost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":284
 *         return py_result
 * 
 *     def GetWindowNum(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_17GetWindowNum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16GetWindowNum[] = "Cython signature: int GetWindowNum()";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_17GetWindowNum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetWindowNum (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16GetWindowNum(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16GetWindowNum(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetWindowNum", 0);

  /* "chenhancc_WIN.pyx":286
 *     def GetWindowNum(self):
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetWindowNum();

  /* "chenhancc_WIN.pyx":287
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":288
 *         cdef int _r = self.inst.get().GetWindowNum()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetMaxLenOfQue(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":284
 *         return py_result
 * 
 *     def GetWindowNum(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.GetWindowNum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":290
 *         return py_result
 * 
 *     def GetMaxLenOfQue(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_19GetMaxLenOfQue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_18GetMaxLenOfQue[] = "Cython signature: int GetMaxLenOfQue()";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_19GetMaxLenOfQue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetMaxLenOfQue (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_18GetMaxLenOfQue(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_18GetMaxLenOfQue(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetMaxLenOfQue", 0);

  /* "chenhancc_WIN.pyx":292
 *     def GetMaxLenOfQue(self):
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetMaxLenOfQue();

  /* "chenhancc_WIN.pyx":293
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":294
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNPE(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":290
 *         return py_result
 * 
 *     def GetMaxLenOfQue(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.GetMaxLenOfQue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":296
 *         return py_result
 * 
 *     def GetNPE(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_21GetNPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_20GetNPE[] = "Cython signature: double GetNPE()";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_21GetNPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNPE (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_20GetNPE(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_20GetNPE(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNPE", 0);

  /* "chenhancc_WIN.pyx":298
 *     def GetNPE(self):
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNPE();

  /* "chenhancc_WIN.pyx":299
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":300
 *         cdef double _r = self.inst.get().GetNPE()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetDepthOfSequenceTree(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":296
 *         return py_result
 * 
 *     def GetNPE(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.GetNPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":302
 *         return py_result
 * 
 *     def GetDepthOfSequenceTree(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_23GetDepthOfSequenceTree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_22GetDepthOfSequenceTree[] = "Cython signature: int GetDepthOfSequenceTree()";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_23GetDepthOfSequenceTree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetDepthOfSequenceTree (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_22GetDepthOfSequenceTree(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_22GetDepthOfSequenceTree(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetDepthOfSequenceTree", 0);

  /* "chenhancc_WIN.pyx":304
 *     def GetDepthOfSequenceTree(self):
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetDepthOfSequenceTree();

  /* "chenhancc_WIN.pyx":305
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":306
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def HasBeenCompleted(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":302
 *         return py_result
 * 
 *     def GetDepthOfSequenceTree(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.GetDepthOfSequenceTree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":308
 *         return py_result
 * 
 *     def HasBeenCompleted(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_25HasBeenCompleted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_24HasBeenCompleted[] = "Cython signature: bool HasBeenCompleted()";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_25HasBeenCompleted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("HasBeenCompleted (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_24HasBeenCompleted(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_24HasBeenCompleted(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("HasBeenCompleted", 0);

  /* "chenhancc_WIN.pyx":310
 *     def HasBeenCompleted(self):
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->HasBeenCompleted();

  /* "chenhancc_WIN.pyx":311
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":312
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetVertexDistances(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":308
 *         return py_result
 * 
 *     def HasBeenCompleted(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.HasBeenCompleted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":314
 *         return py_result
 * 
 *     def GetVertexDistances(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_27GetVertexDistances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_26GetVertexDistances[] = "Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()";
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_27GetVertexDistances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetVertexDistances (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_26GetVertexDistances(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_26GetVertexDistances(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  std::vector<InfoAtVertex>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::vector<InfoAtVertex> ::iterator __pyx_v_it__r;
  struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_item_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("GetVertexDistances", 0);

  /* "chenhancc_WIN.pyx":316
 *     def GetVertexDistances(self):
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()             # <<<<<<<<<<<<<<
 *         py_result = []
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetVertexDistances();

  /* "chenhancc_WIN.pyx":317
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()
 *         py_result = []             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()
 *         cdef InfoAtVertex item_py_result
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chenhancc_WIN.pyx":318
 *         _r = self.inst.get().GetVertexDistances()
 *         py_result = []
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         cdef InfoAtVertex item_py_result
 *         while it__r != _r.end():
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "chenhancc_WIN.pyx":320
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()
 *         cdef InfoAtVertex item_py_result
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_2) break;

    /* "chenhancc_WIN.pyx":321
 *         cdef InfoAtVertex item_py_result
 *         while it__r != _r.end():
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)             # <<<<<<<<<<<<<<
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 *            py_result.append(item_py_result)
 */
    __pyx_t_1 = __pyx_tp_new_13chenhancc_WIN_InfoAtVertex(((PyTypeObject *)__pyx_ptype_13chenhancc_WIN_InfoAtVertex), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_13chenhancc_WIN_InfoAtVertex)))) __PYX_ERR(1, 321, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item_py_result, ((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "chenhancc_WIN.pyx":322
 *         while it__r != _r.end():
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))             # <<<<<<<<<<<<<<
 *            py_result.append(item_py_result)
 *            inc(it__r)
 */
    __pyx_v_item_py_result->inst = boost::shared_ptr<InfoAtVertex> (new InfoAtVertex((*__pyx_v_it__r)));

    /* "chenhancc_WIN.pyx":323
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 *            py_result.append(item_py_result)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_py_result, ((PyObject *)__pyx_v_item_py_result)); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(1, 323, __pyx_L1_error)

    /* "chenhancc_WIN.pyx":324
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 *            py_result.append(item_py_result)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (++__pyx_v_it__r);
  }

  /* "chenhancc_WIN.pyx":325
 *            py_result.append(item_py_result)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class CImprovedCHWithEdgeValve:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":314
 *         return py_result
 * 
 *     def GetVertexDistances(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.GetVertexDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_28__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_30__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CICHWithFurtherPriorityQueue.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":331
 *     cdef shared_ptr[_CImprovedCHWithEdgeValve] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve___dealloc__(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve___dealloc__(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":332
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":331
 *     cdef shared_ptr[_CImprovedCHWithEdgeValve] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":335
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CImprovedCHWithEdgeValve(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_2__init__[] = "Cython signature: void CImprovedCHWithEdgeValve(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_13chenhancc_WIN_24CImprovedCHWithEdgeValve_2__init__;
#endif
static int __pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_inputModel = 0;
  PyObject *__pyx_v_indexOfSourceVerts = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inputModel,&__pyx_n_s_indexOfSourceVerts,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inputModel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indexOfSourceVerts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(1, 335, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 335, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_inputModel = ((struct __pyx_obj_13chenhancc_WIN_CRichModel *)values[0]);
    __pyx_v_indexOfSourceVerts = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 335, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inputModel), __pyx_ptype_13chenhancc_WIN_CRichModel, 1, "inputModel", 0))) __PYX_ERR(1, 335, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_indexOfSourceVerts), (&PySet_Type), 1, "indexOfSourceVerts", 1))) __PYX_ERR(1, 335, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_2__init__(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self), __pyx_v_inputModel, __pyx_v_indexOfSourceVerts);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8__init___2generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":338
 *         """Cython signature: void CImprovedCHWithEdgeValve(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 */

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8__init___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_8_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_8_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 338, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8__init___2generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init___locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.__init__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8__init___2generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *(*__pyx_t_2)(PyObject *);
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 338, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_indexOfSourceVerts)) { __Pyx_RaiseClosureNameError("indexOfSourceVerts"); __PYX_ERR(1, 338, __pyx_L1_error) }
  __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_indexOfSourceVerts); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 338, __pyx_L1_error)
  for (;;) {
    {
      __pyx_t_3 = __pyx_t_2(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 338, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_li);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_li, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_5 = PyInt_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = PyLong_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L7_bool_binop_done:;
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":335
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CImprovedCHWithEdgeValve(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */

static int __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_2__init__(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_inputModel, PyObject *__pyx_v_indexOfSourceVerts) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *__pyx_cur_scope;
  std::set<int>  __pyx_v_v1;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::set<int>  __pyx_t_6;
  CImprovedCHWithEdgeValve *__pyx_t_7;
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_7___init__(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_7___init__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 335, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_indexOfSourceVerts = __pyx_v_indexOfSourceVerts;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_indexOfSourceVerts);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_indexOfSourceVerts);

  /* "chenhancc_WIN.pyx":337
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):
 *         """Cython signature: void CImprovedCHWithEdgeValve(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_inputModel), __pyx_ptype_13chenhancc_WIN_CRichModel); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_inputModel_wrong_type);
      __PYX_ERR(1, 337, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":338
 *         """Cython signature: void CImprovedCHWithEdgeValve(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_indexOfSourceVerts;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PySet_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8__init___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_indexOfSourceVerts_wrong_typ);
      __PYX_ERR(1, 338, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":340
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_CImprovedCHWithEdgeValve](new _CImprovedCHWithEdgeValve((deref(inputModel.inst.get())), v1))
 * 
 */
  __pyx_t_6 = __pyx_convert_set_from_py_int(__pyx_cur_scope->__pyx_v_indexOfSourceVerts); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 340, __pyx_L1_error)
  __pyx_v_v1 = __pyx_t_6;

  /* "chenhancc_WIN.pyx":341
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 *         self.inst = shared_ptr[_CImprovedCHWithEdgeValve](new _CImprovedCHWithEdgeValve((deref(inputModel.inst.get())), v1))             # <<<<<<<<<<<<<<
 * 
 *     def GetRootSourceOfVert(self,  index ):
 */
  try {
    __pyx_t_7 = new CImprovedCHWithEdgeValve((*__pyx_v_inputModel->inst.get()), __pyx_v_v1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 341, __pyx_L1_error)
  }
  __pyx_v_self->inst = boost::shared_ptr<CImprovedCHWithEdgeValve> (__pyx_t_7);

  /* "chenhancc_WIN.pyx":335
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CImprovedCHWithEdgeValve(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":343
 *         self.inst = shared_ptr[_CImprovedCHWithEdgeValve](new _CImprovedCHWithEdgeValve((deref(inputModel.inst.get())), v1))
 * 
 *     def GetRootSourceOfVert(self,  index ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetRootSourceOfVert(int index)"""
 *         assert isinstance(index, (int, long)), 'arg index wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_5GetRootSourceOfVert(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_4GetRootSourceOfVert[] = "Cython signature: int GetRootSourceOfVert(int index)";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_5GetRootSourceOfVert(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetRootSourceOfVert (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_4GetRootSourceOfVert(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_4GetRootSourceOfVert(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("GetRootSourceOfVert", 0);

  /* "chenhancc_WIN.pyx":345
 *     def GetRootSourceOfVert(self,  index ):
 *         """Cython signature: int GetRootSourceOfVert(int index)"""
 *         assert isinstance(index, (int, long)), 'arg index wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_index); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_index); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_index_wrong_type);
      __PYX_ERR(1, 345, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":347
 *         assert isinstance(index, (int, long)), 'arg index wrong type'
 * 
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 347, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->GetRootSourceOfVert(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":348
 * 
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":349
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":343
 *         self.inst = shared_ptr[_CImprovedCHWithEdgeValve](new _CImprovedCHWithEdgeValve((deref(inputModel.inst.get())), v1))
 * 
 *     def GetRootSourceOfVert(self,  index ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetRootSourceOfVert(int index)"""
 *         assert isinstance(index, (int, long)), 'arg index wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.GetRootSourceOfVert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":351
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_7FindSourceVertex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_6FindSourceVertex[] = "Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_7FindSourceVertex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_indexOfVert = 0;
  PyObject *__pyx_v_resultingPath = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FindSourceVertex (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_indexOfVert,&__pyx_n_s_resultingPath,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indexOfVert)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resultingPath)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FindSourceVertex", 1, 2, 2, 1); __PYX_ERR(1, 351, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "FindSourceVertex") < 0)) __PYX_ERR(1, 351, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_indexOfVert = values[0];
    __pyx_v_resultingPath = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FindSourceVertex", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 351, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.FindSourceVertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_resultingPath), (&PyList_Type), 1, "resultingPath", 1))) __PYX_ERR(1, 351, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_6FindSourceVertex(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self), __pyx_v_indexOfVert, __pyx_v_resultingPath);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16FindSourceVertex_2generator5(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":354
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 */

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16FindSourceVertex_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_10_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_10_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 354, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16FindSourceVertex_2generator5, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_FindSourceVertex_locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.FindSourceVertex.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16FindSourceVertex_2generator5(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 354, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_resultingPath)) { __Pyx_RaiseClosureNameError("resultingPath"); __PYX_ERR(1, 354, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_resultingPath == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 354, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_resultingPath; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 354, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_13chenhancc_WIN_EdgePoint); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":351
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_6FindSourceVertex(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, PyObject *__pyx_v_indexOfVert, PyObject *__pyx_v_resultingPath) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *__pyx_cur_scope;
  std::vector<EdgePoint>  *__pyx_v_v1;
  struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_item1 = 0;
  std::vector<EdgePoint>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::vector<EdgePoint> ::iterator __pyx_v_it__r;
  struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_item_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<EdgePoint>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("FindSourceVertex", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 351, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_resultingPath = __pyx_v_resultingPath;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_resultingPath);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_resultingPath);

  /* "chenhancc_WIN.pyx":353
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_indexOfVert); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_indexOfVert); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_indexOfVert_wrong_type);
      __PYX_ERR(1, 353, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":354
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_resultingPath;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16FindSourceVertex_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_resultingPath_wrong_type);
      __PYX_ERR(1, 354, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":356
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()             # <<<<<<<<<<<<<<
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:
 */
  try {
    __pyx_t_6 = new std::vector<EdgePoint> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 356, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_6;

  /* "chenhancc_WIN.pyx":358
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_resultingPath == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 358, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_resultingPath; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 358, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_13chenhancc_WIN_EdgePoint))))) __PYX_ERR(1, 358, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item1, ((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":359
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:
 *             v1.push_back(deref(item1.inst.get()))             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 *         del v1
 */
    try {
      __pyx_v_v1->push_back((*__pyx_v_item1->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 359, __pyx_L1_error)
    }

    /* "chenhancc_WIN.pyx":358
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chenhancc_WIN.pyx":360
 *         for item1 in resultingPath:
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))             # <<<<<<<<<<<<<<
 *         del v1
 *         py_result = []
 */
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_indexOfVert); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 360, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->FindSourceVertex(((int)__pyx_t_8), (*__pyx_v_v1));

  /* "chenhancc_WIN.pyx":361
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 *         del v1             # <<<<<<<<<<<<<<
 *         py_result = []
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()
 */
  delete __pyx_v_v1;

  /* "chenhancc_WIN.pyx":362
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 *         del v1
 *         py_result = []             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()
 *         cdef EdgePoint item_py_result
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "chenhancc_WIN.pyx":363
 *         del v1
 *         py_result = []
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         cdef EdgePoint item_py_result
 *         while it__r != _r.end():
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "chenhancc_WIN.pyx":365
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()
 *         cdef EdgePoint item_py_result
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            item_py_result = EdgePoint.__new__(EdgePoint)
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "chenhancc_WIN.pyx":366
 *         cdef EdgePoint item_py_result
 *         while it__r != _r.end():
 *            item_py_result = EdgePoint.__new__(EdgePoint)             # <<<<<<<<<<<<<<
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 *            py_result.append(item_py_result)
 */
    __pyx_t_5 = __pyx_tp_new_13chenhancc_WIN_EdgePoint(((PyTypeObject *)__pyx_ptype_13chenhancc_WIN_EdgePoint), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_13chenhancc_WIN_EdgePoint)))) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item_py_result, ((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "chenhancc_WIN.pyx":367
 *         while it__r != _r.end():
 *            item_py_result = EdgePoint.__new__(EdgePoint)
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))             # <<<<<<<<<<<<<<
 *            py_result.append(item_py_result)
 *            inc(it__r)
 */
    __pyx_v_item_py_result->inst = boost::shared_ptr<EdgePoint> (new EdgePoint((*__pyx_v_it__r)));

    /* "chenhancc_WIN.pyx":368
 *            item_py_result = EdgePoint.__new__(EdgePoint)
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 *            py_result.append(item_py_result)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_py_result, ((PyObject *)__pyx_v_item_py_result)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(1, 368, __pyx_L1_error)

    /* "chenhancc_WIN.pyx":369
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 *            py_result.append(item_py_result)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (++__pyx_v_it__r);
  }

  /* "chenhancc_WIN.pyx":370
 *            py_result.append(item_py_result)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def PickShortestPaths(self,  num ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":351
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.FindSourceVertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item1);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":372
 *         return py_result
 * 
 *     def PickShortestPaths(self,  num ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void PickShortestPaths(int num)"""
 *         assert isinstance(num, (int, long)), 'arg num wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_9PickShortestPaths(PyObject *__pyx_v_self, PyObject *__pyx_v_num); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8PickShortestPaths[] = "Cython signature: void PickShortestPaths(int num)";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_9PickShortestPaths(PyObject *__pyx_v_self, PyObject *__pyx_v_num) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PickShortestPaths (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8PickShortestPaths(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self), ((PyObject *)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8PickShortestPaths(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, PyObject *__pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("PickShortestPaths", 0);

  /* "chenhancc_WIN.pyx":374
 *     def PickShortestPaths(self,  num ):
 *         """Cython signature: void PickShortestPaths(int num)"""
 *         assert isinstance(num, (int, long)), 'arg num wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().PickShortestPaths((<int>num))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_num); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_num); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_num_wrong_type);
      __PYX_ERR(1, 374, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":376
 *         assert isinstance(num, (int, long)), 'arg num wrong type'
 * 
 *         self.inst.get().PickShortestPaths((<int>num))             # <<<<<<<<<<<<<<
 * 
 *     def Execute(self):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_num); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L1_error)
  __pyx_v_self->inst.get()->PickShortestPaths(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":372
 *         return py_result
 * 
 *     def PickShortestPaths(self,  num ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void PickShortestPaths(int num)"""
 *         assert isinstance(num, (int, long)), 'arg num wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.PickShortestPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":378
 *         self.inst.get().PickShortestPaths((<int>num))
 * 
 *     def Execute(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Execute()"""
 *         self.inst.get().Execute()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_11Execute(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_10Execute[] = "Cython signature: void Execute()";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_11Execute(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Execute (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_10Execute(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_10Execute(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Execute", 0);

  /* "chenhancc_WIN.pyx":380
 *     def Execute(self):
 *         """Cython signature: void Execute()"""
 *         self.inst.get().Execute()             # <<<<<<<<<<<<<<
 * 
 *     def GetRunTime(self):
 */
  __pyx_v_self->inst.get()->Execute();

  /* "chenhancc_WIN.pyx":378
 *         self.inst.get().PickShortestPaths((<int>num))
 * 
 *     def Execute(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Execute()"""
 *         self.inst.get().Execute()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":382
 *         self.inst.get().Execute()
 * 
 *     def GetRunTime(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_13GetRunTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_12GetRunTime[] = "Cython signature: double GetRunTime()";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_13GetRunTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetRunTime (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_12GetRunTime(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_12GetRunTime(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetRunTime", 0);

  /* "chenhancc_WIN.pyx":384
 *     def GetRunTime(self):
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetRunTime();

  /* "chenhancc_WIN.pyx":385
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":386
 *         cdef double _r = self.inst.get().GetRunTime()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetMemoryCost(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":382
 *         self.inst.get().Execute()
 * 
 *     def GetRunTime(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.GetRunTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":388
 *         return py_result
 * 
 *     def GetMemoryCost(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_15GetMemoryCost(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_14GetMemoryCost[] = "Cython signature: double GetMemoryCost()";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_15GetMemoryCost(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetMemoryCost (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_14GetMemoryCost(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_14GetMemoryCost(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetMemoryCost", 0);

  /* "chenhancc_WIN.pyx":390
 *     def GetMemoryCost(self):
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetMemoryCost();

  /* "chenhancc_WIN.pyx":391
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":392
 *         cdef double _r = self.inst.get().GetMemoryCost()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetWindowNum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":388
 *         return py_result
 * 
 *     def GetMemoryCost(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.GetMemoryCost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":394
 *         return py_result
 * 
 *     def GetWindowNum(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_17GetWindowNum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16GetWindowNum[] = "Cython signature: int GetWindowNum()";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_17GetWindowNum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetWindowNum (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16GetWindowNum(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16GetWindowNum(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetWindowNum", 0);

  /* "chenhancc_WIN.pyx":396
 *     def GetWindowNum(self):
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetWindowNum();

  /* "chenhancc_WIN.pyx":397
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":398
 *         cdef int _r = self.inst.get().GetWindowNum()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetMaxLenOfQue(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":394
 *         return py_result
 * 
 *     def GetWindowNum(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.GetWindowNum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":400
 *         return py_result
 * 
 *     def GetMaxLenOfQue(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_19GetMaxLenOfQue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_18GetMaxLenOfQue[] = "Cython signature: int GetMaxLenOfQue()";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_19GetMaxLenOfQue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetMaxLenOfQue (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_18GetMaxLenOfQue(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_18GetMaxLenOfQue(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetMaxLenOfQue", 0);

  /* "chenhancc_WIN.pyx":402
 *     def GetMaxLenOfQue(self):
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetMaxLenOfQue();

  /* "chenhancc_WIN.pyx":403
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":404
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNPE(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":400
 *         return py_result
 * 
 *     def GetMaxLenOfQue(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.GetMaxLenOfQue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":406
 *         return py_result
 * 
 *     def GetNPE(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_21GetNPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_20GetNPE[] = "Cython signature: double GetNPE()";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_21GetNPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNPE (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_20GetNPE(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_20GetNPE(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNPE", 0);

  /* "chenhancc_WIN.pyx":408
 *     def GetNPE(self):
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNPE();

  /* "chenhancc_WIN.pyx":409
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":410
 *         cdef double _r = self.inst.get().GetNPE()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetDepthOfSequenceTree(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":406
 *         return py_result
 * 
 *     def GetNPE(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.GetNPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":412
 *         return py_result
 * 
 *     def GetDepthOfSequenceTree(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_23GetDepthOfSequenceTree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_22GetDepthOfSequenceTree[] = "Cython signature: int GetDepthOfSequenceTree()";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_23GetDepthOfSequenceTree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetDepthOfSequenceTree (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_22GetDepthOfSequenceTree(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_22GetDepthOfSequenceTree(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetDepthOfSequenceTree", 0);

  /* "chenhancc_WIN.pyx":414
 *     def GetDepthOfSequenceTree(self):
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetDepthOfSequenceTree();

  /* "chenhancc_WIN.pyx":415
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":416
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def HasBeenCompleted(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":412
 *         return py_result
 * 
 *     def GetDepthOfSequenceTree(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.GetDepthOfSequenceTree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":418
 *         return py_result
 * 
 *     def HasBeenCompleted(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_25HasBeenCompleted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_24HasBeenCompleted[] = "Cython signature: bool HasBeenCompleted()";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_25HasBeenCompleted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("HasBeenCompleted (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_24HasBeenCompleted(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_24HasBeenCompleted(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("HasBeenCompleted", 0);

  /* "chenhancc_WIN.pyx":420
 *     def HasBeenCompleted(self):
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->HasBeenCompleted();

  /* "chenhancc_WIN.pyx":421
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":422
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetVertexDistances(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":418
 *         return py_result
 * 
 *     def HasBeenCompleted(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.HasBeenCompleted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":424
 *         return py_result
 * 
 *     def GetVertexDistances(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_27GetVertexDistances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_26GetVertexDistances[] = "Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()";
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_27GetVertexDistances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetVertexDistances (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_26GetVertexDistances(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_26GetVertexDistances(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  std::vector<InfoAtVertex>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::vector<InfoAtVertex> ::iterator __pyx_v_it__r;
  struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_item_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("GetVertexDistances", 0);

  /* "chenhancc_WIN.pyx":426
 *     def GetVertexDistances(self):
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()             # <<<<<<<<<<<<<<
 *         py_result = []
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetVertexDistances();

  /* "chenhancc_WIN.pyx":427
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()
 *         py_result = []             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()
 *         cdef InfoAtVertex item_py_result
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chenhancc_WIN.pyx":428
 *         _r = self.inst.get().GetVertexDistances()
 *         py_result = []
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         cdef InfoAtVertex item_py_result
 *         while it__r != _r.end():
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "chenhancc_WIN.pyx":430
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()
 *         cdef InfoAtVertex item_py_result
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_2) break;

    /* "chenhancc_WIN.pyx":431
 *         cdef InfoAtVertex item_py_result
 *         while it__r != _r.end():
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)             # <<<<<<<<<<<<<<
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 *            py_result.append(item_py_result)
 */
    __pyx_t_1 = __pyx_tp_new_13chenhancc_WIN_InfoAtVertex(((PyTypeObject *)__pyx_ptype_13chenhancc_WIN_InfoAtVertex), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_13chenhancc_WIN_InfoAtVertex)))) __PYX_ERR(1, 431, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item_py_result, ((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "chenhancc_WIN.pyx":432
 *         while it__r != _r.end():
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))             # <<<<<<<<<<<<<<
 *            py_result.append(item_py_result)
 *            inc(it__r)
 */
    __pyx_v_item_py_result->inst = boost::shared_ptr<InfoAtVertex> (new InfoAtVertex((*__pyx_v_it__r)));

    /* "chenhancc_WIN.pyx":433
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 *            py_result.append(item_py_result)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_py_result, ((PyObject *)__pyx_v_item_py_result)); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(1, 433, __pyx_L1_error)

    /* "chenhancc_WIN.pyx":434
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 *            py_result.append(item_py_result)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (++__pyx_v_it__r);
  }

  /* "chenhancc_WIN.pyx":435
 *            py_result.append(item_py_result)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class CPoint3D:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":424
 *         return py_result
 * 
 *     def GetVertexDistances(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.GetVertexDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_28__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_30__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_24CImprovedCHWithEdgeValve_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CImprovedCHWithEdgeValve.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":441
 *     cdef shared_ptr[_CPoint3D] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_8CPoint3D_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_8CPoint3D_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_8CPoint3D___dealloc__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_8CPoint3D___dealloc__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":442
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":441
 *     cdef shared_ptr[_CPoint3D] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":446
 * 
 *     property x:
 *         def __set__(self, double x):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().x = (<double>x)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_8CPoint3D_1x_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static int __pyx_pw_13chenhancc_WIN_8CPoint3D_1x_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  double __pyx_v_x;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_PyFloat_AsDouble(__pyx_arg_x); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 446, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_1x___set__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self), ((double)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_8CPoint3D_1x___set__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, double __pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":448
 *         def __set__(self, double x):
 * 
 *             self.inst.get().x = (<double>x)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->x = ((double)__pyx_v_x);

  /* "chenhancc_WIN.pyx":446
 * 
 *     property x:
 *         def __set__(self, double x):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().x = (<double>x)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":451
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().x
 *             py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_1x_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_1x_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_1x_2__get__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_1x_2__get__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":452
 * 
 *         def __get__(self):
 *             cdef double _r = self.inst.get().x             # <<<<<<<<<<<<<<
 *             py_result = <double>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->x;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":453
 *         def __get__(self):
 *             cdef double _r = self.inst.get().x
 *             py_result = <double>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":454
 *             cdef double _r = self.inst.get().x
 *             py_result = <double>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property y:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":451
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().x
 *             py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":457
 * 
 *     property y:
 *         def __set__(self, double y):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().y = (<double>y)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_8CPoint3D_1y_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_y); /*proto*/
static int __pyx_pw_13chenhancc_WIN_8CPoint3D_1y_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_y) {
  double __pyx_v_y;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_y); {
    __pyx_v_y = __pyx_PyFloat_AsDouble(__pyx_arg_y); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 457, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_1y___set__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self), ((double)__pyx_v_y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_8CPoint3D_1y___set__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, double __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":459
 *         def __set__(self, double y):
 * 
 *             self.inst.get().y = (<double>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->y = ((double)__pyx_v_y);

  /* "chenhancc_WIN.pyx":457
 * 
 *     property y:
 *         def __set__(self, double y):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().y = (<double>y)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":462
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().y
 *             py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_1y_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_1y_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_1y_2__get__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_1y_2__get__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":463
 * 
 *         def __get__(self):
 *             cdef double _r = self.inst.get().y             # <<<<<<<<<<<<<<
 *             py_result = <double>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->y;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":464
 *         def __get__(self):
 *             cdef double _r = self.inst.get().y
 *             py_result = <double>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":465
 *             cdef double _r = self.inst.get().y
 *             py_result = <double>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property z:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":462
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().y
 *             py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":468
 * 
 *     property z:
 *         def __set__(self, double z):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().z = (<double>z)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_8CPoint3D_1z_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_z); /*proto*/
static int __pyx_pw_13chenhancc_WIN_8CPoint3D_1z_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_z) {
  double __pyx_v_z;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_z); {
    __pyx_v_z = __pyx_PyFloat_AsDouble(__pyx_arg_z); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 468, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_1z___set__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self), ((double)__pyx_v_z));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_8CPoint3D_1z___set__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, double __pyx_v_z) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":470
 *         def __set__(self, double z):
 * 
 *             self.inst.get().z = (<double>z)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->z = ((double)__pyx_v_z);

  /* "chenhancc_WIN.pyx":468
 * 
 *     property z:
 *         def __set__(self, double z):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().z = (<double>z)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":473
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().z
 *             py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_1z_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_1z_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_1z_2__get__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_1z_2__get__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":474
 * 
 *         def __get__(self):
 *             cdef double _r = self.inst.get().z             # <<<<<<<<<<<<<<
 *             py_result = <double>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->z;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":475
 *         def __get__(self):
 *             cdef double _r = self.inst.get().z
 *             py_result = <double>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":476
 *             cdef double _r = self.inst.get().z
 *             py_result = <double>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _init_0(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":473
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().z
 *             py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":478
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPoint3D()"""
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D())
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_8CPoint3D_2_init_0[] = "Cython signature: void CPoint3D()";
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_2_init_0(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_2_init_0(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* "chenhancc_WIN.pyx":480
 *     def _init_0(self):
 *         """Cython signature: void CPoint3D()"""
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D())             # <<<<<<<<<<<<<<
 * 
 *     def _init_1(self, CPoint3D other ):
 */
  __pyx_v_self->inst = boost::shared_ptr<CPoint3D> (new CPoint3D());

  /* "chenhancc_WIN.pyx":478
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPoint3D()"""
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":482
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D())
 * 
 *     def _init_1(self, CPoint3D other ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPoint3D(CPoint3D other)"""
 *         assert isinstance(other, CPoint3D), 'arg other wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_13chenhancc_WIN_8CPoint3D_4_init_1[] = "Cython signature: void CPoint3D(CPoint3D other)";
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_13chenhancc_WIN_CPoint3D, 1, "other", 0))) __PYX_ERR(1, 482, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_4_init_1(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self), ((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_4_init_1(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "chenhancc_WIN.pyx":484
 *     def _init_1(self, CPoint3D other ):
 *         """Cython signature: void CPoint3D(CPoint3D other)"""
 *         assert isinstance(other, CPoint3D), 'arg other wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D((deref(other.inst.get()))))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_other), __pyx_ptype_13chenhancc_WIN_CPoint3D); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_other_wrong_type);
      __PYX_ERR(1, 484, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":486
 *         assert isinstance(other, CPoint3D), 'arg other wrong type'
 * 
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D((deref(other.inst.get()))))             # <<<<<<<<<<<<<<
 * 
 *     def _init_2(self, double in_0 , double in_1 , double in_2 ):
 */
  __pyx_v_self->inst = boost::shared_ptr<CPoint3D> (new CPoint3D((*__pyx_v_other->inst.get())));

  /* "chenhancc_WIN.pyx":482
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D())
 * 
 *     def _init_1(self, CPoint3D other ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPoint3D(CPoint3D other)"""
 *         assert isinstance(other, CPoint3D), 'arg other wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":488
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D((deref(other.inst.get()))))
 * 
 *     def _init_2(self, double in_0 , double in_1 , double in_2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPoint3D(double, double, double)"""
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_7_init_2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_8CPoint3D_6_init_2[] = "Cython signature: void CPoint3D(double, double, double)";
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_7_init_2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_in_0;
  double __pyx_v_in_1;
  double __pyx_v_in_2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,&__pyx_n_s_in_2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_2", 1, 3, 3, 1); __PYX_ERR(1, 488, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_2", 1, 3, 3, 2); __PYX_ERR(1, 488, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_2") < 0)) __PYX_ERR(1, 488, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_in_0 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_in_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 488, __pyx_L3_error)
    __pyx_v_in_1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_in_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 488, __pyx_L3_error)
    __pyx_v_in_2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_in_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 488, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_2", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 488, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D._init_2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_6_init_2(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1, __pyx_v_in_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_6_init_2(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, double __pyx_v_in_0, double __pyx_v_in_1, double __pyx_v_in_2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_init_2", 0);

  /* "chenhancc_WIN.pyx":490
 *     def _init_2(self, double in_0 , double in_1 , double in_2 ):
 *         """Cython signature: void CPoint3D(double, double, double)"""
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_in_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 490, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":491
 *         """Cython signature: void CPoint3D(double, double, double)"""
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_in_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_1_wrong_type);
      __PYX_ERR(1, 491, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":492
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_in_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_2_wrong_type);
      __PYX_ERR(1, 492, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":496
 * 
 * 
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D((<double>in_0), (<double>in_1), (<double>in_2)))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args , **kwargs):
 */
  __pyx_v_self->inst = boost::shared_ptr<CPoint3D> (new CPoint3D(((double)__pyx_v_in_0), ((double)__pyx_v_in_1), ((double)__pyx_v_in_2)));

  /* "chenhancc_WIN.pyx":488
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D((deref(other.inst.get()))))
 * 
 *     def _init_2(self, double in_0 , double in_1 , double in_2 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPoint3D(double, double, double)"""
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D._init_2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":498
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D((<double>in_0), (<double>in_1), (<double>in_2)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_8CPoint3D_9__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13chenhancc_WIN_8CPoint3D_9__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_8__init__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_8CPoint3D_8__init__(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "chenhancc_WIN.pyx":499
 * 
 *     def __init__(self, *args , **kwargs):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], CPoint3D)):
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":500
 *     def __init__(self, *args , **kwargs):
 *         if not args:
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], CPoint3D)):
 *              self._init_1(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":499
 * 
 *     def __init__(self, *args , **kwargs):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], CPoint3D)):
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":501
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], CPoint3D)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 501, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 == 1) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_t_4, __pyx_ptype_13chenhancc_WIN_CPoint3D); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":502
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], CPoint3D)):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):
 *              self._init_2(*args)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "chenhancc_WIN.pyx":501
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], CPoint3D)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":503
 *         elif (len(args)==1) and (isinstance(args[0], CPoint3D)):
 *              self._init_1(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):             # <<<<<<<<<<<<<<
 *              self._init_2(*args)
 *         else:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 503, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 == 3) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_6 = PyFloat_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_6 != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 1);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 2);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_6 = PyFloat_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_6 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":504
 *              self._init_1(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):
 *              self._init_2(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":503
 *         elif (len(args)==1) and (isinstance(args[0], CPoint3D)):
 *              self._init_1(*args)
 *         elif (len(args)==3) and (isinstance(args[0], float)) and (isinstance(args[1], float)) and (isinstance(args[2], float)):             # <<<<<<<<<<<<<<
 *              self._init_2(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":506
 *              self._init_2(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def Normalize(self):
 */
  /*else*/ {
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_args);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 506, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "chenhancc_WIN.pyx":498
 *         self.inst = shared_ptr[_CPoint3D](new _CPoint3D((<double>in_0), (<double>in_1), (<double>in_2)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":508
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def Normalize(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Normalize()"""
 *         self.inst.get().Normalize()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_11Normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_8CPoint3D_10Normalize[] = "Cython signature: void Normalize()";
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_11Normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_10Normalize(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_10Normalize(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Normalize", 0);

  /* "chenhancc_WIN.pyx":510
 *     def Normalize(self):
 *         """Cython signature: void Normalize()"""
 *         self.inst.get().Normalize()             # <<<<<<<<<<<<<<
 * 
 *     def Len(self):
 */
  __pyx_v_self->inst.get()->Normalize();

  /* "chenhancc_WIN.pyx":508
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def Normalize(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Normalize()"""
 *         self.inst.get().Normalize()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":512
 *         self.inst.get().Normalize()
 * 
 *     def Len(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double Len()"""
 *         cdef double _r = self.inst.get().Len()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_13Len(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_8CPoint3D_12Len[] = "Cython signature: double Len()";
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_13Len(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Len (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_12Len(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_12Len(struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("Len", 0);

  /* "chenhancc_WIN.pyx":514
 *     def Len(self):
 *         """Cython signature: double Len()"""
 *         cdef double _r = self.inst.get().Len()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->Len();

  /* "chenhancc_WIN.pyx":515
 *         """Cython signature: double Len()"""
 *         cdef double _r = self.inst.get().Len()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":516
 *         cdef double _r = self.inst.get().Len()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class CPreviousCH:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":512
 *         self.inst.get().Normalize()
 * 
 *     def Len(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double Len()"""
 *         cdef double _r = self.inst.get().Len()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.Len", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_14__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_8CPoint3D_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_8CPoint3D_16__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_8CPoint3D_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPoint3D.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":522
 *     cdef shared_ptr[_CPreviousCH] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_11CPreviousCH_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_11CPreviousCH_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_11CPreviousCH___dealloc__(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_11CPreviousCH___dealloc__(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":523
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":522
 *     cdef shared_ptr[_CPreviousCH] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":526
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPreviousCH(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_11CPreviousCH_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_2__init__[] = "Cython signature: void CPreviousCH(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_13chenhancc_WIN_11CPreviousCH_2__init__;
#endif
static int __pyx_pw_13chenhancc_WIN_11CPreviousCH_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_inputModel = 0;
  PyObject *__pyx_v_indexOfSourceVerts = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inputModel,&__pyx_n_s_indexOfSourceVerts,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inputModel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indexOfSourceVerts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(1, 526, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 526, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_inputModel = ((struct __pyx_obj_13chenhancc_WIN_CRichModel *)values[0]);
    __pyx_v_indexOfSourceVerts = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 526, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inputModel), __pyx_ptype_13chenhancc_WIN_CRichModel, 1, "inputModel", 0))) __PYX_ERR(1, 526, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_indexOfSourceVerts), (&PySet_Type), 1, "indexOfSourceVerts", 1))) __PYX_ERR(1, 526, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_2__init__(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self), __pyx_v_inputModel, __pyx_v_indexOfSourceVerts);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_11CPreviousCH_8__init___2generator6(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":529
 *         """Cython signature: void CPreviousCH(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 */

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_8__init___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_12_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_12_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 529, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_11CPreviousCH_8__init___2generator6, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init___locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.__init__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_11CPreviousCH_8__init___2generator6(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *(*__pyx_t_2)(PyObject *);
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 529, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_indexOfSourceVerts)) { __Pyx_RaiseClosureNameError("indexOfSourceVerts"); __PYX_ERR(1, 529, __pyx_L1_error) }
  __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_indexOfSourceVerts); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 529, __pyx_L1_error)
  for (;;) {
    {
      __pyx_t_3 = __pyx_t_2(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 529, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_li);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_li, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_5 = PyInt_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = PyLong_Check(__pyx_cur_scope->__pyx_v_li); 
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L7_bool_binop_done:;
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":526
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPreviousCH(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */

static int __pyx_pf_13chenhancc_WIN_11CPreviousCH_2__init__(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_inputModel, PyObject *__pyx_v_indexOfSourceVerts) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *__pyx_cur_scope;
  std::set<int>  __pyx_v_v1;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::set<int>  __pyx_t_6;
  CPreviousCH *__pyx_t_7;
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_11___init__(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_11___init__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 526, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_indexOfSourceVerts = __pyx_v_indexOfSourceVerts;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_indexOfSourceVerts);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_indexOfSourceVerts);

  /* "chenhancc_WIN.pyx":528
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):
 *         """Cython signature: void CPreviousCH(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_inputModel), __pyx_ptype_13chenhancc_WIN_CRichModel); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_inputModel_wrong_type);
      __PYX_ERR(1, 528, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":529
 *         """Cython signature: void CPreviousCH(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_indexOfSourceVerts;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PySet_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_13chenhancc_WIN_11CPreviousCH_8__init___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_indexOfSourceVerts_wrong_typ);
      __PYX_ERR(1, 529, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":531
 *         assert isinstance(indexOfSourceVerts, set) and all(isinstance(li, (int, long)) for li in indexOfSourceVerts), 'arg indexOfSourceVerts wrong type'
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_CPreviousCH](new _CPreviousCH((deref(inputModel.inst.get())), v1))
 * 
 */
  __pyx_t_6 = __pyx_convert_set_from_py_int(__pyx_cur_scope->__pyx_v_indexOfSourceVerts); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 531, __pyx_L1_error)
  __pyx_v_v1 = __pyx_t_6;

  /* "chenhancc_WIN.pyx":532
 * 
 *         cdef libcpp_set[int] v1 = indexOfSourceVerts
 *         self.inst = shared_ptr[_CPreviousCH](new _CPreviousCH((deref(inputModel.inst.get())), v1))             # <<<<<<<<<<<<<<
 * 
 *     def GetRootSourceOfVert(self,  index ):
 */
  try {
    __pyx_t_7 = new CPreviousCH((*__pyx_v_inputModel->inst.get()), __pyx_v_v1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 532, __pyx_L1_error)
  }
  __pyx_v_self->inst = boost::shared_ptr<CPreviousCH> (__pyx_t_7);

  /* "chenhancc_WIN.pyx":526
 * 
 * 
 *     def __init__(self, CRichModel inputModel , set indexOfSourceVerts ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CPreviousCH(CRichModel inputModel, libcpp_set[int] indexOfSourceVerts)"""
 *         assert isinstance(inputModel, CRichModel), 'arg inputModel wrong type'
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":534
 *         self.inst = shared_ptr[_CPreviousCH](new _CPreviousCH((deref(inputModel.inst.get())), v1))
 * 
 *     def GetRootSourceOfVert(self,  index ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetRootSourceOfVert(int index)"""
 *         assert isinstance(index, (int, long)), 'arg index wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_5GetRootSourceOfVert(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_4GetRootSourceOfVert[] = "Cython signature: int GetRootSourceOfVert(int index)";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_5GetRootSourceOfVert(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetRootSourceOfVert (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_4GetRootSourceOfVert(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_4GetRootSourceOfVert(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("GetRootSourceOfVert", 0);

  /* "chenhancc_WIN.pyx":536
 *     def GetRootSourceOfVert(self,  index ):
 *         """Cython signature: int GetRootSourceOfVert(int index)"""
 *         assert isinstance(index, (int, long)), 'arg index wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_index); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_index); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_index_wrong_type);
      __PYX_ERR(1, 536, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":538
 *         assert isinstance(index, (int, long)), 'arg index wrong type'
 * 
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 538, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->GetRootSourceOfVert(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":539
 * 
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":540
 *         cdef int _r = self.inst.get().GetRootSourceOfVert((<int>index))
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":534
 *         self.inst = shared_ptr[_CPreviousCH](new _CPreviousCH((deref(inputModel.inst.get())), v1))
 * 
 *     def GetRootSourceOfVert(self,  index ):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetRootSourceOfVert(int index)"""
 *         assert isinstance(index, (int, long)), 'arg index wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.GetRootSourceOfVert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":542
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_7FindSourceVertex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_6FindSourceVertex[] = "Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_7FindSourceVertex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_indexOfVert = 0;
  PyObject *__pyx_v_resultingPath = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FindSourceVertex (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_indexOfVert,&__pyx_n_s_resultingPath,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indexOfVert)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resultingPath)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FindSourceVertex", 1, 2, 2, 1); __PYX_ERR(1, 542, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "FindSourceVertex") < 0)) __PYX_ERR(1, 542, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_indexOfVert = values[0];
    __pyx_v_resultingPath = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FindSourceVertex", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.FindSourceVertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_resultingPath), (&PyList_Type), 1, "resultingPath", 1))) __PYX_ERR(1, 542, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_6FindSourceVertex(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self), __pyx_v_indexOfVert, __pyx_v_resultingPath);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_11CPreviousCH_16FindSourceVertex_2generator7(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":545
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 */

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_16FindSourceVertex_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_14_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_14_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 545, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_11CPreviousCH_16FindSourceVertex_2generator7, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_FindSourceVertex_locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 545, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.FindSourceVertex.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_11CPreviousCH_16FindSourceVertex_2generator7(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 545, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_resultingPath)) { __Pyx_RaiseClosureNameError("resultingPath"); __PYX_ERR(1, 545, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_resultingPath == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 545, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_resultingPath; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 545, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_13chenhancc_WIN_EdgePoint); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":542
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_6FindSourceVertex(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, PyObject *__pyx_v_indexOfVert, PyObject *__pyx_v_resultingPath) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *__pyx_cur_scope;
  std::vector<EdgePoint>  *__pyx_v_v1;
  struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_item1 = 0;
  std::vector<EdgePoint>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::vector<EdgePoint> ::iterator __pyx_v_it__r;
  struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_item_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<EdgePoint>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("FindSourceVertex", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 542, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_resultingPath = __pyx_v_resultingPath;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_resultingPath);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_resultingPath);

  /* "chenhancc_WIN.pyx":544
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_indexOfVert); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_indexOfVert); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_indexOfVert_wrong_type);
      __PYX_ERR(1, 544, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":545
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_resultingPath;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = __pyx_pf_13chenhancc_WIN_11CPreviousCH_16FindSourceVertex_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 545, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_resultingPath_wrong_type);
      __PYX_ERR(1, 545, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":547
 *         assert isinstance(resultingPath, list) and all(isinstance(elemt_rec, EdgePoint) for elemt_rec in resultingPath), 'arg resultingPath wrong type'
 * 
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()             # <<<<<<<<<<<<<<
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:
 */
  try {
    __pyx_t_6 = new std::vector<EdgePoint> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 547, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_6;

  /* "chenhancc_WIN.pyx":549
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_resultingPath == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 549, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_resultingPath; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 549, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_13chenhancc_WIN_EdgePoint))))) __PYX_ERR(1, 549, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item1, ((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":550
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:
 *             v1.push_back(deref(item1.inst.get()))             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 *         del v1
 */
    try {
      __pyx_v_v1->push_back((*__pyx_v_item1->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 550, __pyx_L1_error)
    }

    /* "chenhancc_WIN.pyx":549
 *         cdef libcpp_vector[_EdgePoint] * v1 = new libcpp_vector[_EdgePoint]()
 *         cdef EdgePoint item1
 *         for item1 in resultingPath:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chenhancc_WIN.pyx":551
 *         for item1 in resultingPath:
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))             # <<<<<<<<<<<<<<
 *         del v1
 *         py_result = []
 */
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_indexOfVert); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 551, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->FindSourceVertex(((int)__pyx_t_8), (*__pyx_v_v1));

  /* "chenhancc_WIN.pyx":552
 *             v1.push_back(deref(item1.inst.get()))
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 *         del v1             # <<<<<<<<<<<<<<
 *         py_result = []
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()
 */
  delete __pyx_v_v1;

  /* "chenhancc_WIN.pyx":553
 *         _r = self.inst.get().FindSourceVertex((<int>indexOfVert), deref(v1))
 *         del v1
 *         py_result = []             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()
 *         cdef EdgePoint item_py_result
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_py_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "chenhancc_WIN.pyx":554
 *         del v1
 *         py_result = []
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         cdef EdgePoint item_py_result
 *         while it__r != _r.end():
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "chenhancc_WIN.pyx":556
 *         cdef libcpp_vector[_EdgePoint].iterator it__r = _r.begin()
 *         cdef EdgePoint item_py_result
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            item_py_result = EdgePoint.__new__(EdgePoint)
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_1) break;

    /* "chenhancc_WIN.pyx":557
 *         cdef EdgePoint item_py_result
 *         while it__r != _r.end():
 *            item_py_result = EdgePoint.__new__(EdgePoint)             # <<<<<<<<<<<<<<
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 *            py_result.append(item_py_result)
 */
    __pyx_t_5 = __pyx_tp_new_13chenhancc_WIN_EdgePoint(((PyTypeObject *)__pyx_ptype_13chenhancc_WIN_EdgePoint), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_13chenhancc_WIN_EdgePoint)))) __PYX_ERR(1, 557, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item_py_result, ((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "chenhancc_WIN.pyx":558
 *         while it__r != _r.end():
 *            item_py_result = EdgePoint.__new__(EdgePoint)
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))             # <<<<<<<<<<<<<<
 *            py_result.append(item_py_result)
 *            inc(it__r)
 */
    __pyx_v_item_py_result->inst = boost::shared_ptr<EdgePoint> (new EdgePoint((*__pyx_v_it__r)));

    /* "chenhancc_WIN.pyx":559
 *            item_py_result = EdgePoint.__new__(EdgePoint)
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 *            py_result.append(item_py_result)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_py_result, ((PyObject *)__pyx_v_item_py_result)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(1, 559, __pyx_L1_error)

    /* "chenhancc_WIN.pyx":560
 *            item_py_result.inst = shared_ptr[_EdgePoint](new _EdgePoint(deref(it__r)))
 *            py_result.append(item_py_result)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (++__pyx_v_it__r);
  }

  /* "chenhancc_WIN.pyx":561
 *            py_result.append(item_py_result)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def PickShortestPaths(self,  num ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":542
 *         return py_result
 * 
 *     def FindSourceVertex(self,  indexOfVert , list resultingPath ):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[EdgePoint] FindSourceVertex(int indexOfVert, libcpp_vector[EdgePoint] resultingPath)"""
 *         assert isinstance(indexOfVert, (int, long)), 'arg indexOfVert wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.FindSourceVertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item1);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_py_result);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":563
 *         return py_result
 * 
 *     def PickShortestPaths(self,  num ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void PickShortestPaths(int num)"""
 *         assert isinstance(num, (int, long)), 'arg num wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_9PickShortestPaths(PyObject *__pyx_v_self, PyObject *__pyx_v_num); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_8PickShortestPaths[] = "Cython signature: void PickShortestPaths(int num)";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_9PickShortestPaths(PyObject *__pyx_v_self, PyObject *__pyx_v_num) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PickShortestPaths (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_8PickShortestPaths(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self), ((PyObject *)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_8PickShortestPaths(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, PyObject *__pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("PickShortestPaths", 0);

  /* "chenhancc_WIN.pyx":565
 *     def PickShortestPaths(self,  num ):
 *         """Cython signature: void PickShortestPaths(int num)"""
 *         assert isinstance(num, (int, long)), 'arg num wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().PickShortestPaths((<int>num))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_num); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_num); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_num_wrong_type);
      __PYX_ERR(1, 565, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":567
 *         assert isinstance(num, (int, long)), 'arg num wrong type'
 * 
 *         self.inst.get().PickShortestPaths((<int>num))             # <<<<<<<<<<<<<<
 * 
 *     def Execute(self):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_num); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 567, __pyx_L1_error)
  __pyx_v_self->inst.get()->PickShortestPaths(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":563
 *         return py_result
 * 
 *     def PickShortestPaths(self,  num ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void PickShortestPaths(int num)"""
 *         assert isinstance(num, (int, long)), 'arg num wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.PickShortestPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":569
 *         self.inst.get().PickShortestPaths((<int>num))
 * 
 *     def Execute(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Execute()"""
 *         self.inst.get().Execute()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_11Execute(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_10Execute[] = "Cython signature: void Execute()";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_11Execute(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Execute (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_10Execute(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_10Execute(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Execute", 0);

  /* "chenhancc_WIN.pyx":571
 *     def Execute(self):
 *         """Cython signature: void Execute()"""
 *         self.inst.get().Execute()             # <<<<<<<<<<<<<<
 * 
 *     def GetRunTime(self):
 */
  __pyx_v_self->inst.get()->Execute();

  /* "chenhancc_WIN.pyx":569
 *         self.inst.get().PickShortestPaths((<int>num))
 * 
 *     def Execute(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Execute()"""
 *         self.inst.get().Execute()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":573
 *         self.inst.get().Execute()
 * 
 *     def GetRunTime(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_13GetRunTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_12GetRunTime[] = "Cython signature: double GetRunTime()";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_13GetRunTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetRunTime (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_12GetRunTime(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_12GetRunTime(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetRunTime", 0);

  /* "chenhancc_WIN.pyx":575
 *     def GetRunTime(self):
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetRunTime();

  /* "chenhancc_WIN.pyx":576
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":577
 *         cdef double _r = self.inst.get().GetRunTime()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetMemoryCost(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":573
 *         self.inst.get().Execute()
 * 
 *     def GetRunTime(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetRunTime()"""
 *         cdef double _r = self.inst.get().GetRunTime()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.GetRunTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":579
 *         return py_result
 * 
 *     def GetMemoryCost(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_15GetMemoryCost(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_14GetMemoryCost[] = "Cython signature: double GetMemoryCost()";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_15GetMemoryCost(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetMemoryCost (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_14GetMemoryCost(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_14GetMemoryCost(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetMemoryCost", 0);

  /* "chenhancc_WIN.pyx":581
 *     def GetMemoryCost(self):
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetMemoryCost();

  /* "chenhancc_WIN.pyx":582
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":583
 *         cdef double _r = self.inst.get().GetMemoryCost()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetWindowNum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":579
 *         return py_result
 * 
 *     def GetMemoryCost(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetMemoryCost()"""
 *         cdef double _r = self.inst.get().GetMemoryCost()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.GetMemoryCost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":585
 *         return py_result
 * 
 *     def GetWindowNum(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_17GetWindowNum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_16GetWindowNum[] = "Cython signature: int GetWindowNum()";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_17GetWindowNum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetWindowNum (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_16GetWindowNum(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_16GetWindowNum(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetWindowNum", 0);

  /* "chenhancc_WIN.pyx":587
 *     def GetWindowNum(self):
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetWindowNum();

  /* "chenhancc_WIN.pyx":588
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":589
 *         cdef int _r = self.inst.get().GetWindowNum()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetMaxLenOfQue(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":585
 *         return py_result
 * 
 *     def GetWindowNum(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetWindowNum()"""
 *         cdef int _r = self.inst.get().GetWindowNum()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.GetWindowNum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":591
 *         return py_result
 * 
 *     def GetMaxLenOfQue(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_19GetMaxLenOfQue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_18GetMaxLenOfQue[] = "Cython signature: int GetMaxLenOfQue()";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_19GetMaxLenOfQue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetMaxLenOfQue (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_18GetMaxLenOfQue(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_18GetMaxLenOfQue(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetMaxLenOfQue", 0);

  /* "chenhancc_WIN.pyx":593
 *     def GetMaxLenOfQue(self):
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetMaxLenOfQue();

  /* "chenhancc_WIN.pyx":594
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":595
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNPE(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":591
 *         return py_result
 * 
 *     def GetMaxLenOfQue(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetMaxLenOfQue()"""
 *         cdef int _r = self.inst.get().GetMaxLenOfQue()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.GetMaxLenOfQue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":597
 *         return py_result
 * 
 *     def GetNPE(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_21GetNPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_20GetNPE[] = "Cython signature: double GetNPE()";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_21GetNPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNPE (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_20GetNPE(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_20GetNPE(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNPE", 0);

  /* "chenhancc_WIN.pyx":599
 *     def GetNPE(self):
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNPE();

  /* "chenhancc_WIN.pyx":600
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":601
 *         cdef double _r = self.inst.get().GetNPE()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetDepthOfSequenceTree(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":597
 *         return py_result
 * 
 *     def GetNPE(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: double GetNPE()"""
 *         cdef double _r = self.inst.get().GetNPE()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.GetNPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":603
 *         return py_result
 * 
 *     def GetDepthOfSequenceTree(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_23GetDepthOfSequenceTree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_22GetDepthOfSequenceTree[] = "Cython signature: int GetDepthOfSequenceTree()";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_23GetDepthOfSequenceTree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetDepthOfSequenceTree (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_22GetDepthOfSequenceTree(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_22GetDepthOfSequenceTree(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetDepthOfSequenceTree", 0);

  /* "chenhancc_WIN.pyx":605
 *     def GetDepthOfSequenceTree(self):
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetDepthOfSequenceTree();

  /* "chenhancc_WIN.pyx":606
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":607
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def HasBeenCompleted(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":603
 *         return py_result
 * 
 *     def GetDepthOfSequenceTree(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetDepthOfSequenceTree()"""
 *         cdef int _r = self.inst.get().GetDepthOfSequenceTree()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.GetDepthOfSequenceTree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":609
 *         return py_result
 * 
 *     def HasBeenCompleted(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_25HasBeenCompleted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_24HasBeenCompleted[] = "Cython signature: bool HasBeenCompleted()";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_25HasBeenCompleted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("HasBeenCompleted (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_24HasBeenCompleted(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_24HasBeenCompleted(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("HasBeenCompleted", 0);

  /* "chenhancc_WIN.pyx":611
 *     def HasBeenCompleted(self):
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->HasBeenCompleted();

  /* "chenhancc_WIN.pyx":612
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":613
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetVertexDistances(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":609
 *         return py_result
 * 
 *     def HasBeenCompleted(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool HasBeenCompleted()"""
 *         cdef bool _r = self.inst.get().HasBeenCompleted()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.HasBeenCompleted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":615
 *         return py_result
 * 
 *     def GetVertexDistances(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_27GetVertexDistances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_11CPreviousCH_26GetVertexDistances[] = "Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()";
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_27GetVertexDistances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetVertexDistances (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_26GetVertexDistances(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_26GetVertexDistances(struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  std::vector<InfoAtVertex>  __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  std::vector<InfoAtVertex> ::iterator __pyx_v_it__r;
  struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_item_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("GetVertexDistances", 0);

  /* "chenhancc_WIN.pyx":617
 *     def GetVertexDistances(self):
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()             # <<<<<<<<<<<<<<
 *         py_result = []
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetVertexDistances();

  /* "chenhancc_WIN.pyx":618
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()
 *         py_result = []             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()
 *         cdef InfoAtVertex item_py_result
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "chenhancc_WIN.pyx":619
 *         _r = self.inst.get().GetVertexDistances()
 *         py_result = []
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()             # <<<<<<<<<<<<<<
 *         cdef InfoAtVertex item_py_result
 *         while it__r != _r.end():
 */
  __pyx_v_it__r = __pyx_v__r.begin();

  /* "chenhancc_WIN.pyx":621
 *         cdef libcpp_vector[_InfoAtVertex].iterator it__r = _r.begin()
 *         cdef InfoAtVertex item_py_result
 *         while it__r != _r.end():             # <<<<<<<<<<<<<<
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it__r != __pyx_v__r.end()) != 0);
    if (!__pyx_t_2) break;

    /* "chenhancc_WIN.pyx":622
 *         cdef InfoAtVertex item_py_result
 *         while it__r != _r.end():
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)             # <<<<<<<<<<<<<<
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 *            py_result.append(item_py_result)
 */
    __pyx_t_1 = __pyx_tp_new_13chenhancc_WIN_InfoAtVertex(((PyTypeObject *)__pyx_ptype_13chenhancc_WIN_InfoAtVertex), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_13chenhancc_WIN_InfoAtVertex)))) __PYX_ERR(1, 622, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item_py_result, ((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "chenhancc_WIN.pyx":623
 *         while it__r != _r.end():
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))             # <<<<<<<<<<<<<<
 *            py_result.append(item_py_result)
 *            inc(it__r)
 */
    __pyx_v_item_py_result->inst = boost::shared_ptr<InfoAtVertex> (new InfoAtVertex((*__pyx_v_it__r)));

    /* "chenhancc_WIN.pyx":624
 *            item_py_result = InfoAtVertex.__new__(InfoAtVertex)
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 *            py_result.append(item_py_result)             # <<<<<<<<<<<<<<
 *            inc(it__r)
 *         return py_result
 */
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_py_result, ((PyObject *)__pyx_v_item_py_result)); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(1, 624, __pyx_L1_error)

    /* "chenhancc_WIN.pyx":625
 *            item_py_result.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex(deref(it__r)))
 *            py_result.append(item_py_result)
 *            inc(it__r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
    (++__pyx_v_it__r);
  }

  /* "chenhancc_WIN.pyx":626
 *            py_result.append(item_py_result)
 *            inc(it__r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class CRichModel:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":615
 *         return py_result
 * 
 *     def GetVertexDistances(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: libcpp_vector[InfoAtVertex] GetVertexDistances()"""
 *         _r = self.inst.get().GetVertexDistances()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.GetVertexDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_item_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_28__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_11CPreviousCH_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_11CPreviousCH_30__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_11CPreviousCH_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CPreviousCH *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CPreviousCH.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":632
 *     cdef shared_ptr[_CRichModel] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_10CRichModel_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_10CRichModel_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_10CRichModel___dealloc__(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_10CRichModel___dealloc__(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":633
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":632
 *     cdef shared_ptr[_CRichModel] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":636
 * 
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CRichModel()"""
 *         self.inst = shared_ptr[_CRichModel](new _CRichModel())
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_10CRichModel_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_2__init__[] = "Cython signature: void CRichModel()";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_13chenhancc_WIN_10CRichModel_2__init__;
#endif
static int __pyx_pw_13chenhancc_WIN_10CRichModel_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_2__init__(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_10CRichModel_2__init__(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "chenhancc_WIN.pyx":638
 *     def __init__(self):
 *         """Cython signature: void CRichModel()"""
 *         self.inst = shared_ptr[_CRichModel](new _CRichModel())             # <<<<<<<<<<<<<<
 * 
 *     def Preprocess(self):
 */
  __pyx_v_self->inst = boost::shared_ptr<CRichModel> (new CRichModel());

  /* "chenhancc_WIN.pyx":636
 * 
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void CRichModel()"""
 *         self.inst = shared_ptr[_CRichModel](new _CRichModel())
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":640
 *         self.inst = shared_ptr[_CRichModel](new _CRichModel())
 * 
 *     def Preprocess(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Preprocess()"""
 *         self.inst.get().Preprocess()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_5Preprocess(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_4Preprocess[] = "Cython signature: void Preprocess()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_5Preprocess(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Preprocess (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_4Preprocess(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_4Preprocess(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Preprocess", 0);

  /* "chenhancc_WIN.pyx":642
 *     def Preprocess(self):
 *         """Cython signature: void Preprocess()"""
 *         self.inst.get().Preprocess()             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfEdges(self):
 */
  __pyx_v_self->inst.get()->Preprocess();

  /* "chenhancc_WIN.pyx":640
 *         self.inst = shared_ptr[_CRichModel](new _CRichModel())
 * 
 *     def Preprocess(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Preprocess()"""
 *         self.inst.get().Preprocess()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":644
 *         self.inst.get().Preprocess()
 * 
 *     def GetNumOfEdges(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfEdges()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_7GetNumOfEdges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_6GetNumOfEdges[] = "Cython signature: int GetNumOfEdges()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_7GetNumOfEdges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfEdges (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_6GetNumOfEdges(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_6GetNumOfEdges(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfEdges", 0);

  /* "chenhancc_WIN.pyx":646
 *     def GetNumOfEdges(self):
 *         """Cython signature: int GetNumOfEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfEdges()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfEdges();

  /* "chenhancc_WIN.pyx":647
 *         """Cython signature: int GetNumOfEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfEdges()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":648
 *         cdef int _r = self.inst.get().GetNumOfEdges()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfValidDirectedEdges(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":644
 *         self.inst.get().Preprocess()
 * 
 *     def GetNumOfEdges(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfEdges()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.GetNumOfEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":650
 *         return py_result
 * 
 *     def GetNumOfValidDirectedEdges(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfValidDirectedEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfValidDirectedEdges()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_9GetNumOfValidDirectedEdges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_8GetNumOfValidDirectedEdges[] = "Cython signature: int GetNumOfValidDirectedEdges()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_9GetNumOfValidDirectedEdges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfValidDirectedEdges (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_8GetNumOfValidDirectedEdges(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_8GetNumOfValidDirectedEdges(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfValidDirectedEdges", 0);

  /* "chenhancc_WIN.pyx":652
 *     def GetNumOfValidDirectedEdges(self):
 *         """Cython signature: int GetNumOfValidDirectedEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfValidDirectedEdges()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfValidDirectedEdges();

  /* "chenhancc_WIN.pyx":653
 *         """Cython signature: int GetNumOfValidDirectedEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfValidDirectedEdges()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":654
 *         cdef int _r = self.inst.get().GetNumOfValidDirectedEdges()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfTotalUndirectedEdges(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":650
 *         return py_result
 * 
 *     def GetNumOfValidDirectedEdges(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfValidDirectedEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfValidDirectedEdges()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.GetNumOfValidDirectedEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":656
 *         return py_result
 * 
 *     def GetNumOfTotalUndirectedEdges(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfTotalUndirectedEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfTotalUndirectedEdges()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_11GetNumOfTotalUndirectedEdges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_10GetNumOfTotalUndirectedEdges[] = "Cython signature: int GetNumOfTotalUndirectedEdges()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_11GetNumOfTotalUndirectedEdges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfTotalUndirectedEdges (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_10GetNumOfTotalUndirectedEdges(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_10GetNumOfTotalUndirectedEdges(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfTotalUndirectedEdges", 0);

  /* "chenhancc_WIN.pyx":658
 *     def GetNumOfTotalUndirectedEdges(self):
 *         """Cython signature: int GetNumOfTotalUndirectedEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfTotalUndirectedEdges()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfTotalUndirectedEdges();

  /* "chenhancc_WIN.pyx":659
 *         """Cython signature: int GetNumOfTotalUndirectedEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfTotalUndirectedEdges()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":660
 *         cdef int _r = self.inst.get().GetNumOfTotalUndirectedEdges()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfGenera(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":656
 *         return py_result
 * 
 *     def GetNumOfTotalUndirectedEdges(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfTotalUndirectedEdges()"""
 *         cdef int _r = self.inst.get().GetNumOfTotalUndirectedEdges()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.GetNumOfTotalUndirectedEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":662
 *         return py_result
 * 
 *     def GetNumOfGenera(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfGenera()"""
 *         cdef int _r = self.inst.get().GetNumOfGenera()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_13GetNumOfGenera(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_12GetNumOfGenera[] = "Cython signature: int GetNumOfGenera()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_13GetNumOfGenera(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfGenera (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_12GetNumOfGenera(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_12GetNumOfGenera(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfGenera", 0);

  /* "chenhancc_WIN.pyx":664
 *     def GetNumOfGenera(self):
 *         """Cython signature: int GetNumOfGenera()"""
 *         cdef int _r = self.inst.get().GetNumOfGenera()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfGenera();

  /* "chenhancc_WIN.pyx":665
 *         """Cython signature: int GetNumOfGenera()"""
 *         cdef int _r = self.inst.get().GetNumOfGenera()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":666
 *         cdef int _r = self.inst.get().GetNumOfGenera()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfIsolated(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":662
 *         return py_result
 * 
 *     def GetNumOfGenera(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfGenera()"""
 *         cdef int _r = self.inst.get().GetNumOfGenera()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.GetNumOfGenera", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":668
 *         return py_result
 * 
 *     def GetNumOfIsolated(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfIsolated()"""
 *         cdef int _r = self.inst.get().GetNumOfIsolated()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_15GetNumOfIsolated(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_14GetNumOfIsolated[] = "Cython signature: int GetNumOfIsolated()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_15GetNumOfIsolated(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfIsolated (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_14GetNumOfIsolated(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_14GetNumOfIsolated(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfIsolated", 0);

  /* "chenhancc_WIN.pyx":670
 *     def GetNumOfIsolated(self):
 *         """Cython signature: int GetNumOfIsolated()"""
 *         cdef int _r = self.inst.get().GetNumOfIsolated()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfIsolated();

  /* "chenhancc_WIN.pyx":671
 *         """Cython signature: int GetNumOfIsolated()"""
 *         cdef int _r = self.inst.get().GetNumOfIsolated()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":672
 *         cdef int _r = self.inst.get().GetNumOfIsolated()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfComponents(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":668
 *         return py_result
 * 
 *     def GetNumOfIsolated(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfIsolated()"""
 *         cdef int _r = self.inst.get().GetNumOfIsolated()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.GetNumOfIsolated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":674
 *         return py_result
 * 
 *     def GetNumOfComponents(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfComponents()"""
 *         cdef int _r = self.inst.get().GetNumOfComponents()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_17GetNumOfComponents(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_16GetNumOfComponents[] = "Cython signature: int GetNumOfComponents()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_17GetNumOfComponents(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfComponents (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_16GetNumOfComponents(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_16GetNumOfComponents(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfComponents", 0);

  /* "chenhancc_WIN.pyx":676
 *     def GetNumOfComponents(self):
 *         """Cython signature: int GetNumOfComponents()"""
 *         cdef int _r = self.inst.get().GetNumOfComponents()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfComponents();

  /* "chenhancc_WIN.pyx":677
 *         """Cython signature: int GetNumOfComponents()"""
 *         cdef int _r = self.inst.get().GetNumOfComponents()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":678
 *         cdef int _r = self.inst.get().GetNumOfComponents()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfBoundries(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":674
 *         return py_result
 * 
 *     def GetNumOfComponents(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfComponents()"""
 *         cdef int _r = self.inst.get().GetNumOfComponents()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.GetNumOfComponents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":680
 *         return py_result
 * 
 *     def GetNumOfBoundries(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfBoundries()"""
 *         cdef int _r = self.inst.get().GetNumOfBoundries()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_19GetNumOfBoundries(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_18GetNumOfBoundries[] = "Cython signature: int GetNumOfBoundries()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_19GetNumOfBoundries(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfBoundries (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_18GetNumOfBoundries(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_18GetNumOfBoundries(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfBoundries", 0);

  /* "chenhancc_WIN.pyx":682
 *     def GetNumOfBoundries(self):
 *         """Cython signature: int GetNumOfBoundries()"""
 *         cdef int _r = self.inst.get().GetNumOfBoundries()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfBoundries();

  /* "chenhancc_WIN.pyx":683
 *         """Cython signature: int GetNumOfBoundries()"""
 *         cdef int _r = self.inst.get().GetNumOfBoundries()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":684
 *         cdef int _r = self.inst.get().GetNumOfBoundries()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def IsConvexVert(self,  in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":680
 *         return py_result
 * 
 *     def GetNumOfBoundries(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfBoundries()"""
 *         cdef int _r = self.inst.get().GetNumOfBoundries()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.GetNumOfBoundries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":686
 *         return py_result
 * 
 *     def IsConvexVert(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool IsConvexVert(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_21IsConvexVert(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_20IsConvexVert[] = "Cython signature: bool IsConvexVert(int)";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_21IsConvexVert(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IsConvexVert (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_20IsConvexVert(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self), ((PyObject *)__pyx_v_in_0));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_20IsConvexVert(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_in_0) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("IsConvexVert", 0);

  /* "chenhancc_WIN.pyx":688
 *     def IsConvexVert(self,  in_0 ):
 *         """Cython signature: bool IsConvexVert(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef bool _r = self.inst.get().IsConvexVert((<int>in_0))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 688, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":690
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 * 
 *         cdef bool _r = self.inst.get().IsConvexVert((<int>in_0))             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 690, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->IsConvexVert(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":691
 * 
 *         cdef bool _r = self.inst.get().IsConvexVert((<int>in_0))
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":692
 *         cdef bool _r = self.inst.get().IsConvexVert((<int>in_0))
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def isBoundaryVert(self,  in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":686
 *         return py_result
 * 
 *     def IsConvexVert(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool IsConvexVert(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.IsConvexVert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":694
 *         return py_result
 * 
 *     def isBoundaryVert(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool isBoundaryVert(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_23isBoundaryVert(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_22isBoundaryVert[] = "Cython signature: bool isBoundaryVert(int)";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_23isBoundaryVert(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isBoundaryVert (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_22isBoundaryVert(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self), ((PyObject *)__pyx_v_in_0));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_22isBoundaryVert(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_in_0) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("isBoundaryVert", 0);

  /* "chenhancc_WIN.pyx":696
 *     def isBoundaryVert(self,  in_0 ):
 *         """Cython signature: bool isBoundaryVert(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef bool _r = self.inst.get().isBoundaryVert((<int>in_0))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 696, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":698
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 * 
 *         cdef bool _r = self.inst.get().isBoundaryVert((<int>in_0))             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 698, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->isBoundaryVert(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":699
 * 
 *         cdef bool _r = self.inst.get().isBoundaryVert((<int>in_0))
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":700
 *         cdef bool _r = self.inst.get().isBoundaryVert((<int>in_0))
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def IsClosedModel(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":694
 *         return py_result
 * 
 *     def isBoundaryVert(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool isBoundaryVert(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.isBoundaryVert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":702
 *         return py_result
 * 
 *     def IsClosedModel(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool IsClosedModel()"""
 *         cdef bool _r = self.inst.get().IsClosedModel()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_25IsClosedModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_24IsClosedModel[] = "Cython signature: bool IsClosedModel()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_25IsClosedModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IsClosedModel (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_24IsClosedModel(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_24IsClosedModel(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("IsClosedModel", 0);

  /* "chenhancc_WIN.pyx":704
 *     def IsClosedModel(self):
 *         """Cython signature: bool IsClosedModel()"""
 *         cdef bool _r = self.inst.get().IsClosedModel()             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->IsClosedModel();

  /* "chenhancc_WIN.pyx":705
 *         """Cython signature: bool IsClosedModel()"""
 *         cdef bool _r = self.inst.get().IsClosedModel()
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":706
 *         cdef bool _r = self.inst.get().IsClosedModel()
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def IsExtremeEdge(self,  in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":702
 *         return py_result
 * 
 *     def IsClosedModel(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool IsClosedModel()"""
 *         cdef bool _r = self.inst.get().IsClosedModel()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.IsClosedModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":708
 *         return py_result
 * 
 *     def IsExtremeEdge(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool IsExtremeEdge(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_27IsExtremeEdge(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_26IsExtremeEdge[] = "Cython signature: bool IsExtremeEdge(int)";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_27IsExtremeEdge(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IsExtremeEdge (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_26IsExtremeEdge(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self), ((PyObject *)__pyx_v_in_0));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_26IsExtremeEdge(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_in_0) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("IsExtremeEdge", 0);

  /* "chenhancc_WIN.pyx":710
 *     def IsExtremeEdge(self,  in_0 ):
 *         """Cython signature: bool IsExtremeEdge(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef bool _r = self.inst.get().IsExtremeEdge((<int>in_0))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 710, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":712
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 * 
 *         cdef bool _r = self.inst.get().IsExtremeEdge((<int>in_0))             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 712, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->IsExtremeEdge(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":713
 * 
 *         cdef bool _r = self.inst.get().IsExtremeEdge((<int>in_0))
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":714
 *         cdef bool _r = self.inst.get().IsExtremeEdge((<int>in_0))
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def IsStartEdge(self,  in_0 ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":708
 *         return py_result
 * 
 *     def IsExtremeEdge(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool IsExtremeEdge(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.IsExtremeEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":716
 *         return py_result
 * 
 *     def IsStartEdge(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool IsStartEdge(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_29IsStartEdge(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_28IsStartEdge[] = "Cython signature: bool IsStartEdge(int)";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_29IsStartEdge(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IsStartEdge (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_28IsStartEdge(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self), ((PyObject *)__pyx_v_in_0));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_28IsStartEdge(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_in_0) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("IsStartEdge", 0);

  /* "chenhancc_WIN.pyx":718
 *     def IsStartEdge(self,  in_0 ):
 *         """Cython signature: bool IsStartEdge(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef bool _r = self.inst.get().IsStartEdge((<int>in_0))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 718, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":720
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 * 
 *         cdef bool _r = self.inst.get().IsStartEdge((<int>in_0))             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L1_error)
  __pyx_v__r = __pyx_v_self->inst.get()->IsStartEdge(((int)__pyx_t_4));

  /* "chenhancc_WIN.pyx":721
 * 
 *         cdef bool _r = self.inst.get().IsStartEdge((<int>in_0))
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":722
 *         cdef bool _r = self.inst.get().IsStartEdge((<int>in_0))
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def HasBeenProcessed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":716
 *         return py_result
 * 
 *     def IsStartEdge(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool IsStartEdge(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.IsStartEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":724
 *         return py_result
 * 
 *     def HasBeenProcessed(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool HasBeenProcessed()"""
 *         cdef bool _r = self.inst.get().HasBeenProcessed()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_31HasBeenProcessed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_30HasBeenProcessed[] = "Cython signature: bool HasBeenProcessed()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_31HasBeenProcessed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("HasBeenProcessed (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_30HasBeenProcessed(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_30HasBeenProcessed(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("HasBeenProcessed", 0);

  /* "chenhancc_WIN.pyx":726
 *     def HasBeenProcessed(self):
 *         """Cython signature: bool HasBeenProcessed()"""
 *         cdef bool _r = self.inst.get().HasBeenProcessed()             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->HasBeenProcessed();

  /* "chenhancc_WIN.pyx":727
 *         """Cython signature: bool HasBeenProcessed()"""
 *         cdef bool _r = self.inst.get().HasBeenProcessed()
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":728
 *         cdef bool _r = self.inst.get().HasBeenProcessed()
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def LoadModel(self, list vertices , list faces ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":724
 *         return py_result
 * 
 *     def HasBeenProcessed(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool HasBeenProcessed()"""
 *         cdef bool _r = self.inst.get().HasBeenProcessed()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.HasBeenProcessed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":730
 *         return py_result
 * 
 *     def LoadModel(self, list vertices , list faces ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_33LoadModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_32LoadModel[] = "Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_33LoadModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vertices = 0;
  PyObject *__pyx_v_faces = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("LoadModel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vertices,&__pyx_n_s_faces,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vertices)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_faces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("LoadModel", 1, 2, 2, 1); __PYX_ERR(1, 730, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "LoadModel") < 0)) __PYX_ERR(1, 730, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_vertices = ((PyObject*)values[0]);
    __pyx_v_faces = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("LoadModel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 730, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.LoadModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vertices), (&PyList_Type), 1, "vertices", 1))) __PYX_ERR(1, 730, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_faces), (&PyList_Type), 1, "faces", 1))) __PYX_ERR(1, 730, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_32LoadModel(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self), __pyx_v_vertices, __pyx_v_faces);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_10CRichModel_9LoadModel_2generator8(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":732
 *     def LoadModel(self, list vertices , list faces ):
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 */

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_9LoadModel_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_16_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_16_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 732, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_10CRichModel_9LoadModel_2generator8, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_LoadModel_locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.LoadModel.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_10CRichModel_9LoadModel_2generator8(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 732, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vertices)) { __Pyx_RaiseClosureNameError("vertices"); __PYX_ERR(1, 732, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vertices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 732, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_vertices; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 732, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_13chenhancc_WIN_CPoint3D); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_13chenhancc_WIN_10CRichModel_9LoadModel_5generator9(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "chenhancc_WIN.pyx":733
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 */

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_9LoadModel_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_17_genexpr(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_17_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 733, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_13chenhancc_WIN_10CRichModel_9LoadModel_5generator9, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_LoadModel_locals_genexpr, __pyx_n_s_chenhancc_WIN); if (unlikely(!gen)) __PYX_ERR(1, 733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.LoadModel.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_13chenhancc_WIN_10CRichModel_9LoadModel_5generator9(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *__pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 733, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_faces)) { __Pyx_RaiseClosureNameError("faces"); __PYX_ERR(1, 733, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_faces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 733, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_faces; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 733, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_ptype_13chenhancc_WIN_CFace); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":730
 *         return py_result
 * 
 *     def LoadModel(self, list vertices , list faces ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 */

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_32LoadModel(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, PyObject *__pyx_v_vertices, PyObject *__pyx_v_faces) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *__pyx_cur_scope;
  std::vector<CPoint3D>  *__pyx_v_v0;
  struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_item0 = 0;
  std::vector<CFace>  *__pyx_v_v1;
  struct __pyx_obj_13chenhancc_WIN_CFace *__pyx_v_item1 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<CPoint3D>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  std::vector<CFace>  *__pyx_t_8;
  __Pyx_RefNannySetupContext("LoadModel", 0);
  __pyx_cur_scope = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *)__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_15_LoadModel(__pyx_ptype_13chenhancc_WIN___pyx_scope_struct_15_LoadModel, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 730, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_vertices = __pyx_v_vertices;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vertices);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vertices);
  __pyx_cur_scope->__pyx_v_faces = __pyx_v_faces;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_faces);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_faces);

  /* "chenhancc_WIN.pyx":732
 *     def LoadModel(self, list vertices , list faces ):
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_vertices;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = __pyx_pf_13chenhancc_WIN_10CRichModel_9LoadModel_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_vertices_wrong_type);
      __PYX_ERR(1, 732, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":733
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_faces;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = PyList_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = __pyx_pf_13chenhancc_WIN_10CRichModel_9LoadModel_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_faces_wrong_type);
      __PYX_ERR(1, 733, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":734
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 *         assert isinstance(faces, list) and all(isinstance(elemt_rec, CFace) for elemt_rec in faces), 'arg faces wrong type'
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()             # <<<<<<<<<<<<<<
 *         cdef CPoint3D item0
 *         for item0 in vertices:
 */
  try {
    __pyx_t_6 = new std::vector<CPoint3D> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 734, __pyx_L1_error)
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "chenhancc_WIN.pyx":736
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 *         for item0 in vertices:             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_vertices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 736, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_vertices; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 736, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_13chenhancc_WIN_CPoint3D))))) __PYX_ERR(1, 736, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item0, ((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "chenhancc_WIN.pyx":737
 *         cdef CPoint3D item0
 *         for item0 in vertices:
 *             v0.push_back(deref(item0.inst.get()))             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 *         cdef CFace item1
 */
    try {
      __pyx_v_v0->push_back((*__pyx_v_item0->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 737, __pyx_L1_error)
    }

    /* "chenhancc_WIN.pyx":736
 *         cdef libcpp_vector[_CPoint3D] * v0 = new libcpp_vector[_CPoint3D]()
 *         cdef CPoint3D item0
 *         for item0 in vertices:             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chenhancc_WIN.pyx":738
 *         for item0 in vertices:
 *             v0.push_back(deref(item0.inst.get()))
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()             # <<<<<<<<<<<<<<
 *         cdef CFace item1
 *         for item1 in faces:
 */
  try {
    __pyx_t_8 = new std::vector<CFace> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 738, __pyx_L1_error)
  }
  __pyx_v_v1 = __pyx_t_8;

  /* "chenhancc_WIN.pyx":740
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 *         cdef CFace item1
 *         for item1 in faces:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_faces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 740, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_faces; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 740, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_13chenhancc_WIN_CFace))))) __PYX_ERR(1, 740, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_item1, ((struct __pyx_obj_13chenhancc_WIN_CFace *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "chenhancc_WIN.pyx":741
 *         cdef CFace item1
 *         for item1 in faces:
 *             v1.push_back(deref(item1.inst.get()))             # <<<<<<<<<<<<<<
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 *         del v1
 */
    try {
      __pyx_v_v1->push_back((*__pyx_v_item1->inst.get()));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 741, __pyx_L1_error)
    }

    /* "chenhancc_WIN.pyx":740
 *         cdef libcpp_vector[_CFace] * v1 = new libcpp_vector[_CFace]()
 *         cdef CFace item1
 *         for item1 in faces:             # <<<<<<<<<<<<<<
 *             v1.push_back(deref(item1.inst.get()))
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chenhancc_WIN.pyx":742
 *         for item1 in faces:
 *             v1.push_back(deref(item1.inst.get()))
 *         self.inst.get().LoadModel(deref(v0), deref(v1))             # <<<<<<<<<<<<<<
 *         del v1
 *         del v0
 */
  __pyx_v_self->inst.get()->LoadModel((*__pyx_v_v0), (*__pyx_v_v1));

  /* "chenhancc_WIN.pyx":743
 *             v1.push_back(deref(item1.inst.get()))
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 *         del v1             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  delete __pyx_v_v1;

  /* "chenhancc_WIN.pyx":744
 *         self.inst.get().LoadModel(deref(v0), deref(v1))
 *         del v1
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfVerts(self):
 */
  delete __pyx_v_v0;

  /* "chenhancc_WIN.pyx":730
 *         return py_result
 * 
 *     def LoadModel(self, list vertices , list faces ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void LoadModel(libcpp_vector[CPoint3D] vertices, libcpp_vector[CFace] faces)"""
 *         assert isinstance(vertices, list) and all(isinstance(elemt_rec, CPoint3D) for elemt_rec in vertices), 'arg vertices wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.LoadModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0);
  __Pyx_XDECREF((PyObject *)__pyx_v_item1);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":746
 *         del v0
 * 
 *     def GetNumOfVerts(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfVerts()"""
 *         cdef int _r = self.inst.get().GetNumOfVerts()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_35GetNumOfVerts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_34GetNumOfVerts[] = "Cython signature: int GetNumOfVerts()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_35GetNumOfVerts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfVerts (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_34GetNumOfVerts(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_34GetNumOfVerts(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfVerts", 0);

  /* "chenhancc_WIN.pyx":748
 *     def GetNumOfVerts(self):
 *         """Cython signature: int GetNumOfVerts()"""
 *         cdef int _r = self.inst.get().GetNumOfVerts()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfVerts();

  /* "chenhancc_WIN.pyx":749
 *         """Cython signature: int GetNumOfVerts()"""
 *         cdef int _r = self.inst.get().GetNumOfVerts()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":750
 *         cdef int _r = self.inst.get().GetNumOfVerts()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def GetNumOfFaces(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":746
 *         del v0
 * 
 *     def GetNumOfVerts(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfVerts()"""
 *         cdef int _r = self.inst.get().GetNumOfVerts()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.GetNumOfVerts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":752
 *         return py_result
 * 
 *     def GetNumOfFaces(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfFaces()"""
 *         cdef int _r = self.inst.get().GetNumOfFaces()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_37GetNumOfFaces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_36GetNumOfFaces[] = "Cython signature: int GetNumOfFaces()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_37GetNumOfFaces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetNumOfFaces (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_36GetNumOfFaces(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_36GetNumOfFaces(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetNumOfFaces", 0);

  /* "chenhancc_WIN.pyx":754
 *     def GetNumOfFaces(self):
 *         """Cython signature: int GetNumOfFaces()"""
 *         cdef int _r = self.inst.get().GetNumOfFaces()             # <<<<<<<<<<<<<<
 *         py_result = <int>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->GetNumOfFaces();

  /* "chenhancc_WIN.pyx":755
 *         """Cython signature: int GetNumOfFaces()"""
 *         cdef int _r = self.inst.get().GetNumOfFaces()
 *         py_result = <int>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":756
 *         cdef int _r = self.inst.get().GetNumOfFaces()
 *         py_result = <int>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def isAValidModel(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":752
 *         return py_result
 * 
 *     def GetNumOfFaces(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: int GetNumOfFaces()"""
 *         cdef int _r = self.inst.get().GetNumOfFaces()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.GetNumOfFaces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":758
 *         return py_result
 * 
 *     def isAValidModel(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool isAValidModel()"""
 *         cdef bool _r = self.inst.get().isAValidModel()
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_39isAValidModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_10CRichModel_38isAValidModel[] = "Cython signature: bool isAValidModel()";
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_39isAValidModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isAValidModel (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_38isAValidModel(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_38isAValidModel(struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isAValidModel", 0);

  /* "chenhancc_WIN.pyx":760
 *     def isAValidModel(self):
 *         """Cython signature: bool isAValidModel()"""
 *         cdef bool _r = self.inst.get().isAValidModel()             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  __pyx_v__r = __pyx_v_self->inst.get()->isAValidModel();

  /* "chenhancc_WIN.pyx":761
 *         """Cython signature: bool isAValidModel()"""
 *         cdef bool _r = self.inst.get().isAValidModel()
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":762
 *         cdef bool _r = self.inst.get().isAValidModel()
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class EdgePoint:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":758
 *         return py_result
 * 
 *     def isAValidModel(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: bool isAValidModel()"""
 *         cdef bool _r = self.inst.get().isAValidModel()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.isAValidModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_40__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_40__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_10CRichModel_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_10CRichModel_42__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_10CRichModel_42__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.CRichModel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":768
 *     cdef shared_ptr[_EdgePoint] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_9EdgePoint_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_9EdgePoint_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_9EdgePoint___dealloc__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_9EdgePoint___dealloc__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":769
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":768
 *     cdef shared_ptr[_EdgePoint] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":773
 * 
 *     property index:
 *         def __set__(self,  index):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().index = (<int>index)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_9EdgePoint_5index_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static int __pyx_pw_13chenhancc_WIN_9EdgePoint_5index_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_5index___set__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_9EdgePoint_5index___set__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":775
 *         def __set__(self,  index):
 * 
 *             self.inst.get().index = (<int>index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 775, __pyx_L1_error)
  __pyx_v_self->inst.get()->index = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":773
 * 
 *     property index:
 *         def __set__(self,  index):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().index = (<int>index)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.index.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":778
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().index
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_5index_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_5index_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_5index_2__get__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_5index_2__get__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":779
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().index             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->index;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":780
 *         def __get__(self):
 *             cdef int _r = self.inst.get().index
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":781
 *             cdef int _r = self.inst.get().index
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property proportion:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":778
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().index
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":784
 * 
 *     property proportion:
 *         def __set__(self, double proportion):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().proportion = (<double>proportion)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_9EdgePoint_10proportion_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_proportion); /*proto*/
static int __pyx_pw_13chenhancc_WIN_9EdgePoint_10proportion_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_proportion) {
  double __pyx_v_proportion;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_proportion); {
    __pyx_v_proportion = __pyx_PyFloat_AsDouble(__pyx_arg_proportion); if (unlikely((__pyx_v_proportion == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 784, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.proportion.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_10proportion___set__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), ((double)__pyx_v_proportion));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_9EdgePoint_10proportion___set__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, double __pyx_v_proportion) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":786
 *         def __set__(self, double proportion):
 * 
 *             self.inst.get().proportion = (<double>proportion)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->proportion = ((double)__pyx_v_proportion);

  /* "chenhancc_WIN.pyx":784
 * 
 *     property proportion:
 *         def __set__(self, double proportion):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().proportion = (<double>proportion)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":789
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().proportion
 *             py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_10proportion_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_10proportion_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_10proportion_2__get__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_10proportion_2__get__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":790
 * 
 *         def __get__(self):
 *             cdef double _r = self.inst.get().proportion             # <<<<<<<<<<<<<<
 *             py_result = <double>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->proportion;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":791
 *         def __get__(self):
 *             cdef double _r = self.inst.get().proportion
 *             py_result = <double>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":792
 *             cdef double _r = self.inst.get().proportion
 *             py_result = <double>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property isVertex:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":789
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().proportion
 *             py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.proportion.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":795
 * 
 *     property isVertex:
 *         def __set__(self,  isVertex):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().isVertex = (<bool>isVertex)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_9EdgePoint_8isVertex_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_isVertex); /*proto*/
static int __pyx_pw_13chenhancc_WIN_9EdgePoint_8isVertex_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_isVertex) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_8isVertex___set__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), ((PyObject *)__pyx_v_isVertex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_9EdgePoint_8isVertex___set__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_isVertex) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":797
 *         def __set__(self,  isVertex):
 * 
 *             self.inst.get().isVertex = (<bool>isVertex)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_isVertex); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 797, __pyx_L1_error)
  __pyx_v_self->inst.get()->isVertex = ((bool)__pyx_t_1);

  /* "chenhancc_WIN.pyx":795
 * 
 *     property isVertex:
 *         def __set__(self,  isVertex):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().isVertex = (<bool>isVertex)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.isVertex.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":800
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bool _r = self.inst.get().isVertex
 *             py_result = <bool>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_8isVertex_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_8isVertex_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_8isVertex_2__get__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_8isVertex_2__get__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":801
 * 
 *         def __get__(self):
 *             cdef bool _r = self.inst.get().isVertex             # <<<<<<<<<<<<<<
 *             py_result = <bool>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->isVertex;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":802
 *         def __get__(self):
 *             cdef bool _r = self.inst.get().isVertex
 *             py_result = <bool>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":803
 *             cdef bool _r = self.inst.get().isVertex
 *             py_result = <bool>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _init_0(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":800
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bool _r = self.inst.get().isVertex
 *             py_result = <bool>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.isVertex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":805
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint()"""
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint())
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_9EdgePoint_2_init_0[] = "Cython signature: void EdgePoint()";
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_2_init_0(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_2_init_0(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* "chenhancc_WIN.pyx":807
 *     def _init_0(self):
 *         """Cython signature: void EdgePoint()"""
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint())             # <<<<<<<<<<<<<<
 * 
 *     def _init_1(self, EdgePoint other ):
 */
  __pyx_v_self->inst = boost::shared_ptr<EdgePoint> (new EdgePoint());

  /* "chenhancc_WIN.pyx":805
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint()"""
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":809
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint())
 * 
 *     def _init_1(self, EdgePoint other ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint(EdgePoint other)"""
 *         assert isinstance(other, EdgePoint), 'arg other wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_13chenhancc_WIN_9EdgePoint_4_init_1[] = "Cython signature: void EdgePoint(EdgePoint other)";
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_13chenhancc_WIN_EdgePoint, 1, "other", 0))) __PYX_ERR(1, 809, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_4_init_1(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), ((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_4_init_1(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "chenhancc_WIN.pyx":811
 *     def _init_1(self, EdgePoint other ):
 *         """Cython signature: void EdgePoint(EdgePoint other)"""
 *         assert isinstance(other, EdgePoint), 'arg other wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((deref(other.inst.get()))))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_other), __pyx_ptype_13chenhancc_WIN_EdgePoint); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_other_wrong_type);
      __PYX_ERR(1, 811, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":813
 *         assert isinstance(other, EdgePoint), 'arg other wrong type'
 * 
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((deref(other.inst.get()))))             # <<<<<<<<<<<<<<
 * 
 *     def _init_2(self,  in_0 ):
 */
  __pyx_v_self->inst = boost::shared_ptr<EdgePoint> (new EdgePoint((*__pyx_v_other->inst.get())));

  /* "chenhancc_WIN.pyx":809
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint())
 * 
 *     def _init_1(self, EdgePoint other ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint(EdgePoint other)"""
 *         assert isinstance(other, EdgePoint), 'arg other wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":815
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((deref(other.inst.get()))))
 * 
 *     def _init_2(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_7_init_2(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_13chenhancc_WIN_9EdgePoint_6_init_2[] = "Cython signature: void EdgePoint(int)";
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_7_init_2(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_2 (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_6_init_2(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), ((PyObject *)__pyx_v_in_0));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_6_init_2(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("_init_2", 0);

  /* "chenhancc_WIN.pyx":817
 *     def _init_2(self,  in_0 ):
 *         """Cython signature: void EdgePoint(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((<int>in_0)))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 817, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":819
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 * 
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((<int>in_0)))             # <<<<<<<<<<<<<<
 * 
 *     def _init_3(self,  in_0 , double in_1 ):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 819, __pyx_L1_error)
  __pyx_v_self->inst = boost::shared_ptr<EdgePoint> (new EdgePoint(((int)__pyx_t_4)));

  /* "chenhancc_WIN.pyx":815
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((deref(other.inst.get()))))
 * 
 *     def _init_2(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint(int)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint._init_2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":821
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((<int>in_0)))
 * 
 *     def _init_3(self,  in_0 , double in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint(int, double)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_9_init_3(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_9EdgePoint_8_init_3[] = "Cython signature: void EdgePoint(int, double)";
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_9_init_3(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_0 = 0;
  double __pyx_v_in_1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_3", 1, 2, 2, 1); __PYX_ERR(1, 821, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_3") < 0)) __PYX_ERR(1, 821, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_0 = values[0];
    __pyx_v_in_1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_in_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 821, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 821, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint._init_3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_8_init_3(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_8_init_3(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_in_0, double __pyx_v_in_1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_init_3", 0);

  /* "chenhancc_WIN.pyx":823
 *     def _init_3(self,  in_0 , double in_1 ):
 *         """Cython signature: void EdgePoint(int, double)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 823, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":824
 *         """Cython signature: void EdgePoint(int, double)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_in_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyFloat_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_1_wrong_type);
      __PYX_ERR(1, 824, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":827
 * 
 * 
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((<int>in_0), (<double>in_1)))             # <<<<<<<<<<<<<<
 * 
 *     def _init_4(self, CRichModel in_0 ,  in_1 ,  in_2 , double in_3 ):
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 827, __pyx_L1_error)
  __pyx_v_self->inst = boost::shared_ptr<EdgePoint> (new EdgePoint(((int)__pyx_t_5), ((double)__pyx_v_in_1)));

  /* "chenhancc_WIN.pyx":821
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((<int>in_0)))
 * 
 *     def _init_3(self,  in_0 , double in_1 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint(int, double)"""
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint._init_3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":829
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((<int>in_0), (<double>in_1)))
 * 
 *     def _init_4(self, CRichModel in_0 ,  in_1 ,  in_2 , double in_3 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint(CRichModel, int, int, double)"""
 *         assert isinstance(in_0, CRichModel), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_11_init_4(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13chenhancc_WIN_9EdgePoint_10_init_4[] = "Cython signature: void EdgePoint(CRichModel, int, int, double)";
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_11_init_4(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_in_0 = 0;
  PyObject *__pyx_v_in_1 = 0;
  PyObject *__pyx_v_in_2 = 0;
  double __pyx_v_in_3;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,&__pyx_n_s_in_2,&__pyx_n_s_in_3,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_4", 1, 4, 4, 1); __PYX_ERR(1, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_4", 1, 4, 4, 2); __PYX_ERR(1, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_4", 1, 4, 4, 3); __PYX_ERR(1, 829, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_4") < 0)) __PYX_ERR(1, 829, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_in_0 = ((struct __pyx_obj_13chenhancc_WIN_CRichModel *)values[0]);
    __pyx_v_in_1 = values[1];
    __pyx_v_in_2 = values[2];
    __pyx_v_in_3 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_in_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 829, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_4", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 829, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint._init_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), __pyx_ptype_13chenhancc_WIN_CRichModel, 1, "in_0", 0))) __PYX_ERR(1, 829, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_10_init_4(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1, __pyx_v_in_2, __pyx_v_in_3);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_10_init_4(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_in_0, PyObject *__pyx_v_in_1, PyObject *__pyx_v_in_2, double __pyx_v_in_3) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_init_4", 0);

  /* "chenhancc_WIN.pyx":831
 *     def _init_4(self, CRichModel in_0 ,  in_1 ,  in_2 , double in_3 ):
 *         """Cython signature: void EdgePoint(CRichModel, int, int, double)"""
 *         assert isinstance(in_0, CRichModel), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_0), __pyx_ptype_13chenhancc_WIN_CRichModel); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 831, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":832
 *         """Cython signature: void EdgePoint(CRichModel, int, int, double)"""
 *         assert isinstance(in_0, CRichModel), 'arg in_0 wrong type'
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 *         assert isinstance(in_3, float), 'arg in_3 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_1); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_1); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_1_wrong_type);
      __PYX_ERR(1, 832, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":833
 *         assert isinstance(in_0, CRichModel), 'arg in_0 wrong type'
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_3, float), 'arg in_3 wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_2); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_2); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_2_wrong_type);
      __PYX_ERR(1, 833, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":834
 *         assert isinstance(in_1, (int, long)), 'arg in_1 wrong type'
 *         assert isinstance(in_2, (int, long)), 'arg in_2 wrong type'
 *         assert isinstance(in_3, float), 'arg in_3 wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_in_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyFloat_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_3_wrong_type);
      __PYX_ERR(1, 834, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":839
 * 
 * 
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((deref(in_0.inst.get())), (<int>in_1), (<int>in_2), (<double>in_3)))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args , **kwargs):
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_in_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 839, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_in_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 839, __pyx_L1_error)
  __pyx_v_self->inst = boost::shared_ptr<EdgePoint> (new EdgePoint((*__pyx_v_in_0->inst.get()), ((int)__pyx_t_5), ((int)__pyx_t_6), ((double)__pyx_v_in_3)));

  /* "chenhancc_WIN.pyx":829
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((<int>in_0), (<double>in_1)))
 * 
 *     def _init_4(self, CRichModel in_0 ,  in_1 ,  in_2 , double in_3 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void EdgePoint(CRichModel, int, int, double)"""
 *         assert isinstance(in_0, CRichModel), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint._init_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":841
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((deref(in_0.inst.get())), (<int>in_1), (<int>in_2), (<double>in_3)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_9EdgePoint_13__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13chenhancc_WIN_9EdgePoint_13__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_12__init__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_9EdgePoint_12__init__(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "chenhancc_WIN.pyx":842
 * 
 *     def __init__(self, *args , **kwargs):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], EdgePoint)):
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":843
 *     def __init__(self, *args , **kwargs):
 *         if not args:
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], EdgePoint)):
 *              self._init_1(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":842
 * 
 *     def __init__(self, *args , **kwargs):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], EdgePoint)):
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":844
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], EdgePoint)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 844, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 == 1) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_t_4, __pyx_ptype_13chenhancc_WIN_EdgePoint); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":845
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], EdgePoint)):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_2(*args)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "chenhancc_WIN.pyx":844
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], EdgePoint)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":846
 *         elif (len(args)==1) and (isinstance(args[0], EdgePoint)):
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_2(*args)
 *         elif (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], float)):
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 846, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 == 1) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = PyInt_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_7 = PyLong_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  __pyx_t_6 = __pyx_t_1;
  __pyx_L8_bool_binop_done:;
  __pyx_t_1 = (__pyx_t_6 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":847
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_2(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], float)):
 *              self._init_3(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":846
 *         elif (len(args)==1) and (isinstance(args[0], EdgePoint)):
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *              self._init_2(*args)
 *         elif (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], float)):
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":848
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_2(*args)
 *         elif (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], float)):             # <<<<<<<<<<<<<<
 *              self._init_3(*args)
 *         elif (len(args)==4) and (isinstance(args[0], CRichModel)) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))) and (isinstance(args[3], float)):
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 848, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 == 2) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6 = PyInt_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_7 = PyLong_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_7 != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L13_bool_binop_done:;
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 1);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6 = PyFloat_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = (__pyx_t_6 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":849
 *              self._init_2(*args)
 *         elif (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], float)):
 *              self._init_3(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==4) and (isinstance(args[0], CRichModel)) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))) and (isinstance(args[3], float)):
 *              self._init_4(*args)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "chenhancc_WIN.pyx":848
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *              self._init_2(*args)
 *         elif (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], float)):             # <<<<<<<<<<<<<<
 *              self._init_3(*args)
 *         elif (len(args)==4) and (isinstance(args[0], CRichModel)) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))) and (isinstance(args[3], float)):
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":850
 *         elif (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], float)):
 *              self._init_3(*args)
 *         elif (len(args)==4) and (isinstance(args[0], CRichModel)) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))) and (isinstance(args[3], float)):             # <<<<<<<<<<<<<<
 *              self._init_4(*args)
 *         else:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 850, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 == 4) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_t_3, __pyx_ptype_13chenhancc_WIN_CRichModel); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 1);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = PyInt_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L19_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 1);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_7 = PyLong_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  __pyx_t_6 = __pyx_t_1;
  __pyx_L19_bool_binop_done:;
  __pyx_t_1 = (__pyx_t_6 != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 2);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_6 = PyInt_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 2);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_7 = PyLong_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_7 != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L22_bool_binop_done:;
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_args, 3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_6 = PyFloat_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_6 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":851
 *              self._init_3(*args)
 *         elif (len(args)==4) and (isinstance(args[0], CRichModel)) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))) and (isinstance(args[3], float)):
 *              self._init_4(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":850
 *         elif (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], float)):
 *              self._init_3(*args)
 *         elif (len(args)==4) and (isinstance(args[0], CRichModel)) and (isinstance(args[1], (int, long))) and (isinstance(args[2], (int, long))) and (isinstance(args[3], float)):             # <<<<<<<<<<<<<<
 *              self._init_4(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":853
 *              self._init_4(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def Get3DPoint(self, CRichModel in_0 ):
 */
  /*else*/ {
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_args);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 853, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "chenhancc_WIN.pyx":841
 *         self.inst = shared_ptr[_EdgePoint](new _EdgePoint((deref(in_0.inst.get())), (<int>in_1), (<int>in_2), (<double>in_3)))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":855
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def Get3DPoint(self, CRichModel in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: CPoint3D Get3DPoint(CRichModel)"""
 *         assert isinstance(in_0, CRichModel), 'arg in_0 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_15Get3DPoint(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static char __pyx_doc_13chenhancc_WIN_9EdgePoint_14Get3DPoint[] = "Cython signature: CPoint3D Get3DPoint(CRichModel)";
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_15Get3DPoint(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Get3DPoint (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), __pyx_ptype_13chenhancc_WIN_CRichModel, 1, "in_0", 0))) __PYX_ERR(1, 855, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_14Get3DPoint(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), ((struct __pyx_obj_13chenhancc_WIN_CRichModel *)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_14Get3DPoint(struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_CRichModel *__pyx_v_in_0) {
  CPoint3D *__pyx_v__r;
  struct __pyx_obj_13chenhancc_WIN_CPoint3D *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("Get3DPoint", 0);

  /* "chenhancc_WIN.pyx":857
 *     def Get3DPoint(self, CRichModel in_0 ):
 *         """Cython signature: CPoint3D Get3DPoint(CRichModel)"""
 *         assert isinstance(in_0, CRichModel), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef _CPoint3D * _r = new _CPoint3D(self.inst.get().Get3DPoint((deref(in_0.inst.get()))))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_in_0), __pyx_ptype_13chenhancc_WIN_CRichModel); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      __PYX_ERR(1, 857, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":859
 *         assert isinstance(in_0, CRichModel), 'arg in_0 wrong type'
 * 
 *         cdef _CPoint3D * _r = new _CPoint3D(self.inst.get().Get3DPoint((deref(in_0.inst.get()))))             # <<<<<<<<<<<<<<
 *         cdef CPoint3D py_result = CPoint3D.__new__(CPoint3D)
 *         py_result.inst = shared_ptr[_CPoint3D](_r)
 */
  __pyx_v__r = new CPoint3D(__pyx_v_self->inst.get()->Get3DPoint((*__pyx_v_in_0->inst.get())));

  /* "chenhancc_WIN.pyx":860
 * 
 *         cdef _CPoint3D * _r = new _CPoint3D(self.inst.get().Get3DPoint((deref(in_0.inst.get()))))
 *         cdef CPoint3D py_result = CPoint3D.__new__(CPoint3D)             # <<<<<<<<<<<<<<
 *         py_result.inst = shared_ptr[_CPoint3D](_r)
 *         return py_result
 */
  __pyx_t_2 = __pyx_tp_new_13chenhancc_WIN_CPoint3D(((PyTypeObject *)__pyx_ptype_13chenhancc_WIN_CPoint3D), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_13chenhancc_WIN_CPoint3D)))) __PYX_ERR(1, 860, __pyx_L1_error)
  __pyx_v_py_result = ((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "chenhancc_WIN.pyx":861
 *         cdef _CPoint3D * _r = new _CPoint3D(self.inst.get().Get3DPoint((deref(in_0.inst.get()))))
 *         cdef CPoint3D py_result = CPoint3D.__new__(CPoint3D)
 *         py_result.inst = shared_ptr[_CPoint3D](_r)             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result->inst = boost::shared_ptr<CPoint3D> (__pyx_v__r);

  /* "chenhancc_WIN.pyx":862
 *         cdef CPoint3D py_result = CPoint3D.__new__(CPoint3D)
 *         py_result.inst = shared_ptr[_CPoint3D](_r)
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * cdef class InfoAtVertex:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_result));
  __pyx_r = ((PyObject *)__pyx_v_py_result);
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":855
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def Get3DPoint(self, CRichModel in_0 ):             # <<<<<<<<<<<<<<
 *         """Cython signature: CPoint3D Get3DPoint(CRichModel)"""
 *         assert isinstance(in_0, CRichModel), 'arg in_0 wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.Get3DPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_16__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_9EdgePoint_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_9EdgePoint_18__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_9EdgePoint_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_EdgePoint *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.EdgePoint.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":868
 *     cdef shared_ptr[_InfoAtVertex] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_13chenhancc_WIN_12InfoAtVertex_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13chenhancc_WIN_12InfoAtVertex_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13chenhancc_WIN_12InfoAtVertex___dealloc__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13chenhancc_WIN_12InfoAtVertex___dealloc__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "chenhancc_WIN.pyx":869
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.reset();

  /* "chenhancc_WIN.pyx":868
 *     cdef shared_ptr[_InfoAtVertex] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "chenhancc_WIN.pyx":873
 * 
 *     property fParentIsPseudoSource:
 *         def __set__(self,  fParentIsPseudoSource):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().fParentIsPseudoSource = (<bool>fParentIsPseudoSource)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_fParentIsPseudoSource); /*proto*/
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_fParentIsPseudoSource) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource___set__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), ((PyObject *)__pyx_v_fParentIsPseudoSource));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_fParentIsPseudoSource) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":875
 *         def __set__(self,  fParentIsPseudoSource):
 * 
 *             self.inst.get().fParentIsPseudoSource = (<bool>fParentIsPseudoSource)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_fParentIsPseudoSource); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 875, __pyx_L1_error)
  __pyx_v_self->inst.get()->fParentIsPseudoSource = ((bool)__pyx_t_1);

  /* "chenhancc_WIN.pyx":873
 * 
 *     property fParentIsPseudoSource:
 *         def __set__(self,  fParentIsPseudoSource):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().fParentIsPseudoSource = (<bool>fParentIsPseudoSource)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.fParentIsPseudoSource.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":878
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bool _r = self.inst.get().fParentIsPseudoSource
 *             py_result = <bool>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource_2__get__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":879
 * 
 *         def __get__(self):
 *             cdef bool _r = self.inst.get().fParentIsPseudoSource             # <<<<<<<<<<<<<<
 *             py_result = <bool>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->fParentIsPseudoSource;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":880
 *         def __get__(self):
 *             cdef bool _r = self.inst.get().fParentIsPseudoSource
 *             py_result = <bool>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "chenhancc_WIN.pyx":881
 *             cdef bool _r = self.inst.get().fParentIsPseudoSource
 *             py_result = <bool>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property birthTime:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":878
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bool _r = self.inst.get().fParentIsPseudoSource
 *             py_result = <bool>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.fParentIsPseudoSource.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":884
 * 
 *     property birthTime:
 *         def __set__(self, bytes birthTime):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().birthTime = (<char>((birthTime)[0]))
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_9birthTime_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_birthTime); /*proto*/
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_9birthTime_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_birthTime) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_birthTime), (&PyBytes_Type), 1, "birthTime", 1))) __PYX_ERR(1, 884, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_9birthTime___set__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), ((PyObject*)__pyx_v_birthTime));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_9birthTime___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_birthTime) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":886
 *         def __set__(self, bytes birthTime):
 * 
 *             self.inst.get().birthTime = (<char>((birthTime)[0]))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_birthTime == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 886, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBytes_GetItemInt(__pyx_v_birthTime, 0, 0); if (unlikely(__pyx_t_1 == ((char)-1) && PyErr_Occurred())) __PYX_ERR(1, 886, __pyx_L1_error)
  __pyx_v_self->inst.get()->birthTime = ((char)__pyx_t_1);

  /* "chenhancc_WIN.pyx":884
 * 
 *     property birthTime:
 *         def __set__(self, bytes birthTime):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().birthTime = (<char>((birthTime)[0]))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.birthTime.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":889
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef char  _r = self.inst.get().birthTime
 *             py_result = chr(<char>(_r))
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_9birthTime_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_9birthTime_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_9birthTime_2__get__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_9birthTime_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  char __pyx_v__r;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":890
 * 
 *         def __get__(self):
 *             cdef char  _r = self.inst.get().birthTime             # <<<<<<<<<<<<<<
 *             py_result = chr(<char>(_r))
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->birthTime;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":891
 *         def __get__(self):
 *             cdef char  _r = self.inst.get().birthTime
 *             py_result = chr(<char>(_r))             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_char(((char)__pyx_v__r)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_py_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "chenhancc_WIN.pyx":892
 *             cdef char  _r = self.inst.get().birthTime
 *             py_result = chr(<char>(_r))
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property indexOfParent:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":889
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef char  _r = self.inst.get().birthTime
 *             py_result = chr(<char>(_r))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.birthTime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":895
 * 
 *     property indexOfParent:
 *         def __set__(self,  indexOfParent):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfParent = (<int>indexOfParent)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_13indexOfParent_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfParent); /*proto*/
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_13indexOfParent_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfParent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_13indexOfParent___set__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), ((PyObject *)__pyx_v_indexOfParent));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_13indexOfParent___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_indexOfParent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":897
 *         def __set__(self,  indexOfParent):
 * 
 *             self.inst.get().indexOfParent = (<int>indexOfParent)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_indexOfParent); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 897, __pyx_L1_error)
  __pyx_v_self->inst.get()->indexOfParent = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":895
 * 
 *     property indexOfParent:
 *         def __set__(self,  indexOfParent):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfParent = (<int>indexOfParent)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.indexOfParent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":900
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfParent
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_13indexOfParent_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_13indexOfParent_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_13indexOfParent_2__get__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_13indexOfParent_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":901
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfParent             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->indexOfParent;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":902
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfParent
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":903
 *             cdef int _r = self.inst.get().indexOfParent
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property indexOfRootVertOfParent:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":900
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfParent
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.indexOfParent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":906
 * 
 *     property indexOfRootVertOfParent:
 *         def __set__(self,  indexOfRootVertOfParent):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfRootVertOfParent = (<int>indexOfRootVertOfParent)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfRootVertOfParent); /*proto*/
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indexOfRootVertOfParent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent___set__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), ((PyObject *)__pyx_v_indexOfRootVertOfParent));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_indexOfRootVertOfParent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":908
 *         def __set__(self,  indexOfRootVertOfParent):
 * 
 *             self.inst.get().indexOfRootVertOfParent = (<int>indexOfRootVertOfParent)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_indexOfRootVertOfParent); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 908, __pyx_L1_error)
  __pyx_v_self->inst.get()->indexOfRootVertOfParent = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":906
 * 
 *     property indexOfRootVertOfParent:
 *         def __set__(self,  indexOfRootVertOfParent):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().indexOfRootVertOfParent = (<int>indexOfRootVertOfParent)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.indexOfRootVertOfParent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":911
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfRootVertOfParent
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent_2__get__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":912
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfRootVertOfParent             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->indexOfRootVertOfParent;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":913
 *         def __get__(self):
 *             cdef int _r = self.inst.get().indexOfRootVertOfParent
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":914
 *             cdef int _r = self.inst.get().indexOfRootVertOfParent
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property level:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":911
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().indexOfRootVertOfParent
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.indexOfRootVertOfParent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":917
 * 
 *     property level:
 *         def __set__(self,  level):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().level = (<int>level)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_5level_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_level); /*proto*/
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_5level_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_level) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_5level___set__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), ((PyObject *)__pyx_v_level));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_5level___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_level) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":919
 *         def __set__(self,  level):
 * 
 *             self.inst.get().level = (<int>level)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_level); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 919, __pyx_L1_error)
  __pyx_v_self->inst.get()->level = ((int)__pyx_t_1);

  /* "chenhancc_WIN.pyx":917
 * 
 *     property level:
 *         def __set__(self,  level):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().level = (<int>level)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.level.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":922
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().level
 *             py_result = <int>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_5level_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_5level_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_5level_2__get__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_5level_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  int __pyx_v__r;
  int __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":923
 * 
 *         def __get__(self):
 *             cdef int _r = self.inst.get().level             # <<<<<<<<<<<<<<
 *             py_result = <int>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->level;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":924
 *         def __get__(self):
 *             cdef int _r = self.inst.get().level
 *             py_result = <int>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((int)__pyx_v__r);

  /* "chenhancc_WIN.pyx":925
 *             cdef int _r = self.inst.get().level
 *             py_result = <int>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property disUptodate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":922
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef int _r = self.inst.get().level
 *             py_result = <int>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.level.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":928
 * 
 *     property disUptodate:
 *         def __set__(self, double disUptodate):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().disUptodate = (<double>disUptodate)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_11disUptodate_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_disUptodate); /*proto*/
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_11disUptodate_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_disUptodate) {
  double __pyx_v_disUptodate;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_disUptodate); {
    __pyx_v_disUptodate = __pyx_PyFloat_AsDouble(__pyx_arg_disUptodate); if (unlikely((__pyx_v_disUptodate == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 928, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.disUptodate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_11disUptodate___set__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), ((double)__pyx_v_disUptodate));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_11disUptodate___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, double __pyx_v_disUptodate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":930
 *         def __set__(self, double disUptodate):
 * 
 *             self.inst.get().disUptodate = (<double>disUptodate)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->disUptodate = ((double)__pyx_v_disUptodate);

  /* "chenhancc_WIN.pyx":928
 * 
 *     property disUptodate:
 *         def __set__(self, double disUptodate):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().disUptodate = (<double>disUptodate)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":933
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().disUptodate
 *             py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_11disUptodate_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_11disUptodate_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_11disUptodate_2__get__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_11disUptodate_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":934
 * 
 *         def __get__(self):
 *             cdef double _r = self.inst.get().disUptodate             # <<<<<<<<<<<<<<
 *             py_result = <double>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->disUptodate;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":935
 *         def __get__(self):
 *             cdef double _r = self.inst.get().disUptodate
 *             py_result = <double>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":936
 *             cdef double _r = self.inst.get().disUptodate
 *             py_result = <double>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     property entryProp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":933
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().disUptodate
 *             py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.disUptodate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":939
 * 
 *     property entryProp:
 *         def __set__(self, double entryProp):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().entryProp = (<double>entryProp)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_9entryProp_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_entryProp); /*proto*/
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_9entryProp_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_entryProp) {
  double __pyx_v_entryProp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_entryProp); {
    __pyx_v_entryProp = __pyx_PyFloat_AsDouble(__pyx_arg_entryProp); if (unlikely((__pyx_v_entryProp == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 939, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.entryProp.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_9entryProp___set__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), ((double)__pyx_v_entryProp));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_9entryProp___set__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, double __pyx_v_entryProp) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "chenhancc_WIN.pyx":941
 *         def __set__(self, double entryProp):
 * 
 *             self.inst.get().entryProp = (<double>entryProp)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->inst.get()->entryProp = ((double)__pyx_v_entryProp);

  /* "chenhancc_WIN.pyx":939
 * 
 *     property entryProp:
 *         def __set__(self, double entryProp):             # <<<<<<<<<<<<<<
 * 
 *             self.inst.get().entryProp = (<double>entryProp)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":944
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().entryProp
 *             py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_9entryProp_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_9entryProp_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_9entryProp_2__get__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_9entryProp_2__get__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chenhancc_WIN.pyx":945
 * 
 *         def __get__(self):
 *             cdef double _r = self.inst.get().entryProp             # <<<<<<<<<<<<<<
 *             py_result = <double>_r
 *             return py_result
 */
  __pyx_t_1 = __pyx_v_self->inst.get()->entryProp;
  __pyx_v__r = __pyx_t_1;

  /* "chenhancc_WIN.pyx":946
 *         def __get__(self):
 *             cdef double _r = self.inst.get().entryProp
 *             py_result = <double>_r             # <<<<<<<<<<<<<<
 *             return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "chenhancc_WIN.pyx":947
 *             cdef double _r = self.inst.get().entryProp
 *             py_result = <double>_r
 *             return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _init_0(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chenhancc_WIN.pyx":944
 * 
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double _r = self.inst.get().entryProp
 *             py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.entryProp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":949
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void InfoAtVertex()"""
 *         self.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex())
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_13chenhancc_WIN_12InfoAtVertex_2_init_0[] = "Cython signature: void InfoAtVertex()";
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_3_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_2_init_0(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_2_init_0(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* "chenhancc_WIN.pyx":951
 *     def _init_0(self):
 *         """Cython signature: void InfoAtVertex()"""
 *         self.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex())             # <<<<<<<<<<<<<<
 * 
 *     def _init_1(self, InfoAtVertex other ):
 */
  __pyx_v_self->inst = boost::shared_ptr<InfoAtVertex> (new InfoAtVertex());

  /* "chenhancc_WIN.pyx":949
 *             return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         """Cython signature: void InfoAtVertex()"""
 *         self.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":953
 *         self.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex())
 * 
 *     def _init_1(self, InfoAtVertex other ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void InfoAtVertex(InfoAtVertex other)"""
 *         assert isinstance(other, InfoAtVertex), 'arg other wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_13chenhancc_WIN_12InfoAtVertex_4_init_1[] = "Cython signature: void InfoAtVertex(InfoAtVertex other)";
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_5_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_13chenhancc_WIN_InfoAtVertex, 1, "other", 0))) __PYX_ERR(1, 953, __pyx_L1_error)
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_4_init_1(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), ((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_4_init_1(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "chenhancc_WIN.pyx":955
 *     def _init_1(self, InfoAtVertex other ):
 *         """Cython signature: void InfoAtVertex(InfoAtVertex other)"""
 *         assert isinstance(other, InfoAtVertex), 'arg other wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex((deref(other.inst.get()))))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_other), __pyx_ptype_13chenhancc_WIN_InfoAtVertex); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_other_wrong_type);
      __PYX_ERR(1, 955, __pyx_L1_error)
    }
  }
  #endif

  /* "chenhancc_WIN.pyx":957
 *         assert isinstance(other, InfoAtVertex), 'arg other wrong type'
 * 
 *         self.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex((deref(other.inst.get()))))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args , **kwargs):
 */
  __pyx_v_self->inst = boost::shared_ptr<InfoAtVertex> (new InfoAtVertex((*__pyx_v_other->inst.get())));

  /* "chenhancc_WIN.pyx":953
 *         self.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex())
 * 
 *     def _init_1(self, InfoAtVertex other ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void InfoAtVertex(InfoAtVertex other)"""
 *         assert isinstance(other, InfoAtVertex), 'arg other wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chenhancc_WIN.pyx":959
 *         self.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex((deref(other.inst.get()))))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

/* Python wrapper */
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13chenhancc_WIN_12InfoAtVertex_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_6__init__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13chenhancc_WIN_12InfoAtVertex_6__init__(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "chenhancc_WIN.pyx":960
 * 
 *     def __init__(self, *args , **kwargs):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], InfoAtVertex)):
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":961
 *     def __init__(self, *args , **kwargs):
 *         if not args:
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], InfoAtVertex)):
 *              self._init_1(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "chenhancc_WIN.pyx":960
 * 
 *     def __init__(self, *args , **kwargs):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], InfoAtVertex)):
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":962
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], InfoAtVertex)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 962, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 == 1) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, 0);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_t_4, __pyx_ptype_13chenhancc_WIN_InfoAtVertex); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "chenhancc_WIN.pyx":963
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], InfoAtVertex)):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "chenhancc_WIN.pyx":962
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], InfoAtVertex)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "chenhancc_WIN.pyx":965
 *              self._init_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_args);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 965, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "chenhancc_WIN.pyx":959
 *         self.inst = shared_ptr[_InfoAtVertex](new _InfoAtVertex((deref(other.inst.get()))))
 * 
 *     def __init__(self, *args , **kwargs):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_8__reduce_cython__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13chenhancc_WIN_12InfoAtVertex_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13chenhancc_WIN_12InfoAtVertex_10__setstate_cython__(((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13chenhancc_WIN_12InfoAtVertex_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("chenhancc_WIN.InfoAtVertex.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.from_py":108
 * 
 * @cname("__pyx_convert_set_from_py_int")
 * cdef set[X] __pyx_convert_set_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

static std::set<int>  __pyx_convert_set_from_py_int(PyObject *__pyx_v_o) {
  std::set<int>  __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::set<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_set_from_py_int", 0);

  /* "set.from_py":110
 * cdef set[X] __pyx_convert_set_from_py_int(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 110, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 110, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "set.from_py":111
 *     cdef set[X] s
 *     for item in o:
 *         s.insert(<X>item)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
    __pyx_v_s.insert(((int)__pyx_t_5));

    /* "set.from_py":110
 * cdef set[X] __pyx_convert_set_from_py_int(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "set.from_py":112
 *     for item in o:
 *         s.insert(<X>item)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "set.from_py":108
 * 
 * @cname("__pyx_convert_set_from_py_int")
 * cdef set[X] __pyx_convert_set_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("set.from_py.__pyx_convert_set_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_13chenhancc_WIN_CBaseModel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_CBaseModel *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_CBaseModel *)o);
  new((void*)&(p->inst)) boost::shared_ptr<CBaseModel> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_CBaseModel(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_CBaseModel *p = (struct __pyx_obj_13chenhancc_WIN_CBaseModel *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_10CBaseModel_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_CBaseModel[] = {
  {"LoadModel", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CBaseModel_5LoadModel, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_10CBaseModel_4LoadModel},
  {"GetNumOfVerts", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CBaseModel_7GetNumOfVerts, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CBaseModel_6GetNumOfVerts},
  {"GetNumOfFaces", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CBaseModel_9GetNumOfFaces, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CBaseModel_8GetNumOfFaces},
  {"isAValidModel", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CBaseModel_11isAValidModel, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CBaseModel_10isAValidModel},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CBaseModel_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CBaseModel_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_CBaseModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.CBaseModel", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_CBaseModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_CBaseModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_CBaseModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_10CBaseModel_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_CBaseModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_13chenhancc_WIN_CEdge(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_CEdge *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_CEdge *)o);
  new((void*)&(p->inst)) boost::shared_ptr<CEdge> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_CEdge(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_CEdge *p = (struct __pyx_obj_13chenhancc_WIN_CEdge *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_5CEdge_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_13chenhancc_WIN_5CEdge_indexOfLeftVert(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftVert_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfLeftVert(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftVert_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_5CEdge_indexOfRightVert(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightVert_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfRightVert(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightVert_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_5CEdge_indexOfOppositeVert(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_5CEdge_19indexOfOppositeVert_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfOppositeVert(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_5CEdge_19indexOfOppositeVert_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_5CEdge_indexOfLeftEdge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftEdge_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfLeftEdge(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_5CEdge_15indexOfLeftEdge_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_5CEdge_indexOfRightEdge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightEdge_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfRightEdge(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfRightEdge_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_5CEdge_indexOfReverseEdge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_5CEdge_18indexOfReverseEdge_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfReverseEdge(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_5CEdge_18indexOfReverseEdge_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_5CEdge_indexOfFrontFace(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfFrontFace_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfFrontFace(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_5CEdge_16indexOfFrontFace_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_5CEdge_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_5CEdge_6length_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_5CEdge_length(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_5CEdge_6length_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_CEdge[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_5CEdge_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_5CEdge_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_13chenhancc_WIN_CEdge[] = {
  {(char *)"indexOfLeftVert", __pyx_getprop_13chenhancc_WIN_5CEdge_indexOfLeftVert, __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfLeftVert, (char *)0, 0},
  {(char *)"indexOfRightVert", __pyx_getprop_13chenhancc_WIN_5CEdge_indexOfRightVert, __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfRightVert, (char *)0, 0},
  {(char *)"indexOfOppositeVert", __pyx_getprop_13chenhancc_WIN_5CEdge_indexOfOppositeVert, __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfOppositeVert, (char *)0, 0},
  {(char *)"indexOfLeftEdge", __pyx_getprop_13chenhancc_WIN_5CEdge_indexOfLeftEdge, __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfLeftEdge, (char *)0, 0},
  {(char *)"indexOfRightEdge", __pyx_getprop_13chenhancc_WIN_5CEdge_indexOfRightEdge, __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfRightEdge, (char *)0, 0},
  {(char *)"indexOfReverseEdge", __pyx_getprop_13chenhancc_WIN_5CEdge_indexOfReverseEdge, __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfReverseEdge, (char *)0, 0},
  {(char *)"indexOfFrontFace", __pyx_getprop_13chenhancc_WIN_5CEdge_indexOfFrontFace, __pyx_setprop_13chenhancc_WIN_5CEdge_indexOfFrontFace, (char *)0, 0},
  {(char *)"length", __pyx_getprop_13chenhancc_WIN_5CEdge_length, __pyx_setprop_13chenhancc_WIN_5CEdge_length, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_CEdge = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.CEdge", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_CEdge), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_CEdge, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_CEdge, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_13chenhancc_WIN_CEdge, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_5CEdge_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_CEdge, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_13chenhancc_WIN_CFace(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_CFace *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_CFace *)o);
  new((void*)&(p->inst)) boost::shared_ptr<CFace> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_CFace(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_CFace *p = (struct __pyx_obj_13chenhancc_WIN_CFace *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_5CFace_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_CFace[] = {
  {"_init_0", (PyCFunction)__pyx_pw_13chenhancc_WIN_5CFace_3_init_0, METH_NOARGS, __pyx_doc_13chenhancc_WIN_5CFace_2_init_0},
  {"_init_1", (PyCFunction)__pyx_pw_13chenhancc_WIN_5CFace_5_init_1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_5CFace_4_init_1},
  {"setIndices", (PyCFunction)__pyx_pw_13chenhancc_WIN_5CFace_9setIndices, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_5CFace_8setIndices},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_5CFace_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_5CFace_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_CFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.CFace", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_CFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_CFace, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_CFace, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_5CFace_7__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_CFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_13chenhancc_WIN_CICHWithFurtherPriorityQueue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)o);
  new((void*)&(p->inst)) boost::shared_ptr<CICHWithFurtherPriorityQueue> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_CICHWithFurtherPriorityQueue(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *p = (struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_CICHWithFurtherPriorityQueue[] = {
  {"GetRootSourceOfVert", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_5GetRootSourceOfVert, METH_O, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_4GetRootSourceOfVert},
  {"FindSourceVertex", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_7FindSourceVertex, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_6FindSourceVertex},
  {"PickShortestPaths", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_9PickShortestPaths, METH_O, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_8PickShortestPaths},
  {"Execute", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_11Execute, METH_NOARGS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_10Execute},
  {"GetRunTime", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_13GetRunTime, METH_NOARGS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_12GetRunTime},
  {"GetMemoryCost", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_15GetMemoryCost, METH_NOARGS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_14GetMemoryCost},
  {"GetWindowNum", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_17GetWindowNum, METH_NOARGS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_16GetWindowNum},
  {"GetMaxLenOfQue", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_19GetMaxLenOfQue, METH_NOARGS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_18GetMaxLenOfQue},
  {"GetNPE", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_21GetNPE, METH_NOARGS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_20GetNPE},
  {"GetDepthOfSequenceTree", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_23GetDepthOfSequenceTree, METH_NOARGS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_22GetDepthOfSequenceTree},
  {"HasBeenCompleted", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_25HasBeenCompleted, METH_NOARGS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_24HasBeenCompleted},
  {"GetVertexDistances", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_27GetVertexDistances, METH_NOARGS, __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_26GetVertexDistances},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_CICHWithFurtherPriorityQueue = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.CICHWithFurtherPriorityQueue", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_CICHWithFurtherPriorityQueue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_CICHWithFurtherPriorityQueue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_CICHWithFurtherPriorityQueue, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_CICHWithFurtherPriorityQueue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_13chenhancc_WIN_CImprovedCHWithEdgeValve(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)o);
  new((void*)&(p->inst)) boost::shared_ptr<CImprovedCHWithEdgeValve> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_CImprovedCHWithEdgeValve(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *p = (struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_CImprovedCHWithEdgeValve[] = {
  {"GetRootSourceOfVert", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_5GetRootSourceOfVert, METH_O, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_4GetRootSourceOfVert},
  {"FindSourceVertex", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_7FindSourceVertex, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_6FindSourceVertex},
  {"PickShortestPaths", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_9PickShortestPaths, METH_O, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_8PickShortestPaths},
  {"Execute", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_11Execute, METH_NOARGS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_10Execute},
  {"GetRunTime", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_13GetRunTime, METH_NOARGS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_12GetRunTime},
  {"GetMemoryCost", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_15GetMemoryCost, METH_NOARGS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_14GetMemoryCost},
  {"GetWindowNum", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_17GetWindowNum, METH_NOARGS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_16GetWindowNum},
  {"GetMaxLenOfQue", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_19GetMaxLenOfQue, METH_NOARGS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_18GetMaxLenOfQue},
  {"GetNPE", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_21GetNPE, METH_NOARGS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_20GetNPE},
  {"GetDepthOfSequenceTree", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_23GetDepthOfSequenceTree, METH_NOARGS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_22GetDepthOfSequenceTree},
  {"HasBeenCompleted", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_25HasBeenCompleted, METH_NOARGS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_24HasBeenCompleted},
  {"GetVertexDistances", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_27GetVertexDistances, METH_NOARGS, __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_26GetVertexDistances},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_CImprovedCHWithEdgeValve = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.CImprovedCHWithEdgeValve", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_CImprovedCHWithEdgeValve), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_CImprovedCHWithEdgeValve, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_CImprovedCHWithEdgeValve, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_24CImprovedCHWithEdgeValve_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_CImprovedCHWithEdgeValve, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_13chenhancc_WIN_CPoint3D(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_CPoint3D *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_CPoint3D *)o);
  new((void*)&(p->inst)) boost::shared_ptr<CPoint3D> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_CPoint3D(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_CPoint3D *p = (struct __pyx_obj_13chenhancc_WIN_CPoint3D *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_8CPoint3D_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_13chenhancc_WIN_8CPoint3D_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_8CPoint3D_1x_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_8CPoint3D_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_8CPoint3D_1x_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_8CPoint3D_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_8CPoint3D_1y_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_8CPoint3D_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_8CPoint3D_1y_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_8CPoint3D_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_8CPoint3D_1z_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_8CPoint3D_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_8CPoint3D_1z_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_CPoint3D[] = {
  {"_init_0", (PyCFunction)__pyx_pw_13chenhancc_WIN_8CPoint3D_3_init_0, METH_NOARGS, __pyx_doc_13chenhancc_WIN_8CPoint3D_2_init_0},
  {"_init_1", (PyCFunction)__pyx_pw_13chenhancc_WIN_8CPoint3D_5_init_1, METH_O, __pyx_doc_13chenhancc_WIN_8CPoint3D_4_init_1},
  {"_init_2", (PyCFunction)__pyx_pw_13chenhancc_WIN_8CPoint3D_7_init_2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_8CPoint3D_6_init_2},
  {"Normalize", (PyCFunction)__pyx_pw_13chenhancc_WIN_8CPoint3D_11Normalize, METH_NOARGS, __pyx_doc_13chenhancc_WIN_8CPoint3D_10Normalize},
  {"Len", (PyCFunction)__pyx_pw_13chenhancc_WIN_8CPoint3D_13Len, METH_NOARGS, __pyx_doc_13chenhancc_WIN_8CPoint3D_12Len},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_8CPoint3D_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_8CPoint3D_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_13chenhancc_WIN_CPoint3D[] = {
  {(char *)"x", __pyx_getprop_13chenhancc_WIN_8CPoint3D_x, __pyx_setprop_13chenhancc_WIN_8CPoint3D_x, (char *)0, 0},
  {(char *)"y", __pyx_getprop_13chenhancc_WIN_8CPoint3D_y, __pyx_setprop_13chenhancc_WIN_8CPoint3D_y, (char *)0, 0},
  {(char *)"z", __pyx_getprop_13chenhancc_WIN_8CPoint3D_z, __pyx_setprop_13chenhancc_WIN_8CPoint3D_z, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_CPoint3D = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.CPoint3D", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_CPoint3D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_CPoint3D, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_CPoint3D, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_13chenhancc_WIN_CPoint3D, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_8CPoint3D_9__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_CPoint3D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_13chenhancc_WIN_CPreviousCH(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_CPreviousCH *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)o);
  new((void*)&(p->inst)) boost::shared_ptr<CPreviousCH> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_CPreviousCH(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_CPreviousCH *p = (struct __pyx_obj_13chenhancc_WIN_CPreviousCH *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_11CPreviousCH_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_CPreviousCH[] = {
  {"GetRootSourceOfVert", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_5GetRootSourceOfVert, METH_O, __pyx_doc_13chenhancc_WIN_11CPreviousCH_4GetRootSourceOfVert},
  {"FindSourceVertex", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_7FindSourceVertex, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_6FindSourceVertex},
  {"PickShortestPaths", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_9PickShortestPaths, METH_O, __pyx_doc_13chenhancc_WIN_11CPreviousCH_8PickShortestPaths},
  {"Execute", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_11Execute, METH_NOARGS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_10Execute},
  {"GetRunTime", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_13GetRunTime, METH_NOARGS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_12GetRunTime},
  {"GetMemoryCost", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_15GetMemoryCost, METH_NOARGS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_14GetMemoryCost},
  {"GetWindowNum", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_17GetWindowNum, METH_NOARGS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_16GetWindowNum},
  {"GetMaxLenOfQue", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_19GetMaxLenOfQue, METH_NOARGS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_18GetMaxLenOfQue},
  {"GetNPE", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_21GetNPE, METH_NOARGS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_20GetNPE},
  {"GetDepthOfSequenceTree", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_23GetDepthOfSequenceTree, METH_NOARGS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_22GetDepthOfSequenceTree},
  {"HasBeenCompleted", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_25HasBeenCompleted, METH_NOARGS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_24HasBeenCompleted},
  {"GetVertexDistances", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_27GetVertexDistances, METH_NOARGS, __pyx_doc_13chenhancc_WIN_11CPreviousCH_26GetVertexDistances},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_11CPreviousCH_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_CPreviousCH = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.CPreviousCH", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_CPreviousCH), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_CPreviousCH, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_CPreviousCH, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_11CPreviousCH_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_CPreviousCH, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_13chenhancc_WIN_CRichModel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_CRichModel *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_CRichModel *)o);
  new((void*)&(p->inst)) boost::shared_ptr<CRichModel> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_CRichModel(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_CRichModel *p = (struct __pyx_obj_13chenhancc_WIN_CRichModel *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_10CRichModel_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_CRichModel[] = {
  {"Preprocess", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_5Preprocess, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_4Preprocess},
  {"GetNumOfEdges", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_7GetNumOfEdges, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_6GetNumOfEdges},
  {"GetNumOfValidDirectedEdges", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_9GetNumOfValidDirectedEdges, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_8GetNumOfValidDirectedEdges},
  {"GetNumOfTotalUndirectedEdges", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_11GetNumOfTotalUndirectedEdges, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_10GetNumOfTotalUndirectedEdges},
  {"GetNumOfGenera", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_13GetNumOfGenera, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_12GetNumOfGenera},
  {"GetNumOfIsolated", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_15GetNumOfIsolated, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_14GetNumOfIsolated},
  {"GetNumOfComponents", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_17GetNumOfComponents, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_16GetNumOfComponents},
  {"GetNumOfBoundries", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_19GetNumOfBoundries, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_18GetNumOfBoundries},
  {"IsConvexVert", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_21IsConvexVert, METH_O, __pyx_doc_13chenhancc_WIN_10CRichModel_20IsConvexVert},
  {"isBoundaryVert", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_23isBoundaryVert, METH_O, __pyx_doc_13chenhancc_WIN_10CRichModel_22isBoundaryVert},
  {"IsClosedModel", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_25IsClosedModel, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_24IsClosedModel},
  {"IsExtremeEdge", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_27IsExtremeEdge, METH_O, __pyx_doc_13chenhancc_WIN_10CRichModel_26IsExtremeEdge},
  {"IsStartEdge", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_29IsStartEdge, METH_O, __pyx_doc_13chenhancc_WIN_10CRichModel_28IsStartEdge},
  {"HasBeenProcessed", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_31HasBeenProcessed, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_30HasBeenProcessed},
  {"LoadModel", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_33LoadModel, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_10CRichModel_32LoadModel},
  {"GetNumOfVerts", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_35GetNumOfVerts, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_34GetNumOfVerts},
  {"GetNumOfFaces", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_37GetNumOfFaces, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_36GetNumOfFaces},
  {"isAValidModel", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_39isAValidModel, METH_NOARGS, __pyx_doc_13chenhancc_WIN_10CRichModel_38isAValidModel},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_41__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_10CRichModel_43__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_CRichModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.CRichModel", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_CRichModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_CRichModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_CRichModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_10CRichModel_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_CRichModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_13chenhancc_WIN_EdgePoint(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_EdgePoint *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_EdgePoint *)o);
  new((void*)&(p->inst)) boost::shared_ptr<EdgePoint> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_EdgePoint(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_EdgePoint *p = (struct __pyx_obj_13chenhancc_WIN_EdgePoint *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_9EdgePoint_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_13chenhancc_WIN_9EdgePoint_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_9EdgePoint_5index_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_9EdgePoint_index(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_9EdgePoint_5index_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_9EdgePoint_proportion(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_9EdgePoint_10proportion_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_9EdgePoint_proportion(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_9EdgePoint_10proportion_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_9EdgePoint_isVertex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_9EdgePoint_8isVertex_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_9EdgePoint_isVertex(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_9EdgePoint_8isVertex_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_EdgePoint[] = {
  {"_init_0", (PyCFunction)__pyx_pw_13chenhancc_WIN_9EdgePoint_3_init_0, METH_NOARGS, __pyx_doc_13chenhancc_WIN_9EdgePoint_2_init_0},
  {"_init_1", (PyCFunction)__pyx_pw_13chenhancc_WIN_9EdgePoint_5_init_1, METH_O, __pyx_doc_13chenhancc_WIN_9EdgePoint_4_init_1},
  {"_init_2", (PyCFunction)__pyx_pw_13chenhancc_WIN_9EdgePoint_7_init_2, METH_O, __pyx_doc_13chenhancc_WIN_9EdgePoint_6_init_2},
  {"_init_3", (PyCFunction)__pyx_pw_13chenhancc_WIN_9EdgePoint_9_init_3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_9EdgePoint_8_init_3},
  {"_init_4", (PyCFunction)__pyx_pw_13chenhancc_WIN_9EdgePoint_11_init_4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13chenhancc_WIN_9EdgePoint_10_init_4},
  {"Get3DPoint", (PyCFunction)__pyx_pw_13chenhancc_WIN_9EdgePoint_15Get3DPoint, METH_O, __pyx_doc_13chenhancc_WIN_9EdgePoint_14Get3DPoint},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_9EdgePoint_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_9EdgePoint_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_13chenhancc_WIN_EdgePoint[] = {
  {(char *)"index", __pyx_getprop_13chenhancc_WIN_9EdgePoint_index, __pyx_setprop_13chenhancc_WIN_9EdgePoint_index, (char *)0, 0},
  {(char *)"proportion", __pyx_getprop_13chenhancc_WIN_9EdgePoint_proportion, __pyx_setprop_13chenhancc_WIN_9EdgePoint_proportion, (char *)0, 0},
  {(char *)"isVertex", __pyx_getprop_13chenhancc_WIN_9EdgePoint_isVertex, __pyx_setprop_13chenhancc_WIN_9EdgePoint_isVertex, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_EdgePoint = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.EdgePoint", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_EdgePoint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_EdgePoint, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_EdgePoint, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_13chenhancc_WIN_EdgePoint, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_9EdgePoint_13__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_EdgePoint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_13chenhancc_WIN_InfoAtVertex(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)o);
  new((void*)&(p->inst)) boost::shared_ptr<InfoAtVertex> ();
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN_InfoAtVertex(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *p = (struct __pyx_obj_13chenhancc_WIN_InfoAtVertex *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_13chenhancc_WIN_12InfoAtVertex_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_13chenhancc_WIN_12InfoAtVertex_fParentIsPseudoSource(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_fParentIsPseudoSource(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_21fParentIsPseudoSource_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_12InfoAtVertex_birthTime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_9birthTime_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_birthTime(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_9birthTime_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_12InfoAtVertex_indexOfParent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_13indexOfParent_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_indexOfParent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_13indexOfParent_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_12InfoAtVertex_indexOfRootVertOfParent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_indexOfRootVertOfParent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_23indexOfRootVertOfParent_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_12InfoAtVertex_level(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_5level_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_level(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_5level_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_12InfoAtVertex_disUptodate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_11disUptodate_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_disUptodate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_11disUptodate_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_13chenhancc_WIN_12InfoAtVertex_entryProp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_9entryProp_3__get__(o);
}

static int __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_entryProp(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_13chenhancc_WIN_12InfoAtVertex_9entryProp_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_13chenhancc_WIN_InfoAtVertex[] = {
  {"_init_0", (PyCFunction)__pyx_pw_13chenhancc_WIN_12InfoAtVertex_3_init_0, METH_NOARGS, __pyx_doc_13chenhancc_WIN_12InfoAtVertex_2_init_0},
  {"_init_1", (PyCFunction)__pyx_pw_13chenhancc_WIN_12InfoAtVertex_5_init_1, METH_O, __pyx_doc_13chenhancc_WIN_12InfoAtVertex_4_init_1},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_12InfoAtVertex_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13chenhancc_WIN_12InfoAtVertex_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_13chenhancc_WIN_InfoAtVertex[] = {
  {(char *)"fParentIsPseudoSource", __pyx_getprop_13chenhancc_WIN_12InfoAtVertex_fParentIsPseudoSource, __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_fParentIsPseudoSource, (char *)0, 0},
  {(char *)"birthTime", __pyx_getprop_13chenhancc_WIN_12InfoAtVertex_birthTime, __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_birthTime, (char *)0, 0},
  {(char *)"indexOfParent", __pyx_getprop_13chenhancc_WIN_12InfoAtVertex_indexOfParent, __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_indexOfParent, (char *)0, 0},
  {(char *)"indexOfRootVertOfParent", __pyx_getprop_13chenhancc_WIN_12InfoAtVertex_indexOfRootVertOfParent, __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_indexOfRootVertOfParent, (char *)0, 0},
  {(char *)"level", __pyx_getprop_13chenhancc_WIN_12InfoAtVertex_level, __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_level, (char *)0, 0},
  {(char *)"disUptodate", __pyx_getprop_13chenhancc_WIN_12InfoAtVertex_disUptodate, __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_disUptodate, (char *)0, 0},
  {(char *)"entryProp", __pyx_getprop_13chenhancc_WIN_12InfoAtVertex_entryProp, __pyx_setprop_13chenhancc_WIN_12InfoAtVertex_entryProp, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13chenhancc_WIN_InfoAtVertex = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.InfoAtVertex", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN_InfoAtVertex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN_InfoAtVertex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13chenhancc_WIN_InfoAtVertex, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_13chenhancc_WIN_InfoAtVertex, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_13chenhancc_WIN_12InfoAtVertex_7__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN_InfoAtVertex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct__LoadModel[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct__LoadModel = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct__LoadModel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct__LoadModel > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct__LoadModel[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct__LoadModel];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct__LoadModel(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_faces);
  Py_CLEAR(p->__pyx_v_vertices);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct__LoadModel < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct__LoadModel[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct__LoadModel++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct__LoadModel(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *)o;
  if (p->__pyx_v_faces) {
    e = (*v)(p->__pyx_v_faces, a); if (e) return e;
  }
  if (p->__pyx_v_vertices) {
    e = (*v)(p->__pyx_v_vertices, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct__LoadModel(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *)o;
  tmp = ((PyObject*)p->__pyx_v_faces);
  p->__pyx_v_faces = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vertices);
  p->__pyx_v_vertices = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct__LoadModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct__LoadModel", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct__LoadModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct__LoadModel, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct__LoadModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct__LoadModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_1_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_1_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_2_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_2_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_2_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_2_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_2_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_2_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct__LoadModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_2_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_3___init__[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_3___init__ = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_3___init__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_3___init__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_3___init__[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_3___init__];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_3___init__(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_indexOfSourceVerts);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_3___init__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_3___init__[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_3___init__++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_3___init__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *)o;
  if (p->__pyx_v_indexOfSourceVerts) {
    e = (*v)(p->__pyx_v_indexOfSourceVerts, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_3___init__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *)o;
  tmp = ((PyObject*)p->__pyx_v_indexOfSourceVerts);
  p->__pyx_v_indexOfSourceVerts = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_3___init__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_3___init__", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_3___init__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_3___init__, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_3___init__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_3___init__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_4_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_li);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_4_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_li) {
    e = (*v)(p->__pyx_v_li, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_4_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_3___init__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_li);
  p->__pyx_v_li = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_4_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_resultingPath);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *)o;
  if (p->__pyx_v_resultingPath) {
    e = (*v)(p->__pyx_v_resultingPath, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *)o;
  tmp = ((PyObject*)p->__pyx_v_resultingPath);
  p->__pyx_v_resultingPath = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_5_FindSourceVertex", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_6_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_6_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_6_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_6_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_7___init__[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_7___init__ = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_7___init__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_7___init__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_7___init__[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_7___init__];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_7___init__(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_indexOfSourceVerts);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_7___init__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_7___init__[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_7___init__++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_7___init__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *)o;
  if (p->__pyx_v_indexOfSourceVerts) {
    e = (*v)(p->__pyx_v_indexOfSourceVerts, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_7___init__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *)o;
  tmp = ((PyObject*)p->__pyx_v_indexOfSourceVerts);
  p->__pyx_v_indexOfSourceVerts = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_7___init__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_7___init__", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_7___init__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_7___init__, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_7___init__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_7___init__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_8_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_8_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_8_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_8_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_8_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_8_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_8_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_li);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_8_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_8_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_8_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_8_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_li) {
    e = (*v)(p->__pyx_v_li, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_8_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_7___init__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_li);
  p->__pyx_v_li = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_8_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_8_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_8_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_8_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_8_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_8_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_8_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_resultingPath);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *)o;
  if (p->__pyx_v_resultingPath) {
    e = (*v)(p->__pyx_v_resultingPath, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *)o;
  tmp = ((PyObject*)p->__pyx_v_resultingPath);
  p->__pyx_v_resultingPath = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_9_FindSourceVertex", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_10_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_10_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_10_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_10_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_10_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_10_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_10_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_10_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_10_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_10_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_10_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_10_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_10_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_10_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_10_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_10_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_10_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_10_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_10_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_11___init__[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_11___init__ = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_11___init__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_11___init__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_11___init__[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_11___init__];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_11___init__(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_indexOfSourceVerts);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_11___init__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_11___init__[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_11___init__++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_11___init__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *)o;
  if (p->__pyx_v_indexOfSourceVerts) {
    e = (*v)(p->__pyx_v_indexOfSourceVerts, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_11___init__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *)o;
  tmp = ((PyObject*)p->__pyx_v_indexOfSourceVerts);
  p->__pyx_v_indexOfSourceVerts = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_11___init__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_11___init__", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_11___init__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_11___init__, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_11___init__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_11___init__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_12_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_12_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_12_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_12_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_12_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_12_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_12_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_li);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_12_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_12_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_12_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_12_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_li) {
    e = (*v)(p->__pyx_v_li, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_12_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_11___init__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_li);
  p->__pyx_v_li = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_12_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_12_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_12_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_12_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_12_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_12_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_12_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_resultingPath);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *)o;
  if (p->__pyx_v_resultingPath) {
    e = (*v)(p->__pyx_v_resultingPath, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *)o;
  tmp = ((PyObject*)p->__pyx_v_resultingPath);
  p->__pyx_v_resultingPath = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_13_FindSourceVertex", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_14_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_14_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_14_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_14_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_14_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_14_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_14_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_14_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_14_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_14_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_14_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_14_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_14_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_14_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_14_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_14_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_14_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_14_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_14_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_15_LoadModel[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_15_LoadModel = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_15_LoadModel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_15_LoadModel > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_15_LoadModel[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_15_LoadModel];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_15_LoadModel(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_faces);
  Py_CLEAR(p->__pyx_v_vertices);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_15_LoadModel < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_15_LoadModel[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_15_LoadModel++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_15_LoadModel(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *)o;
  if (p->__pyx_v_faces) {
    e = (*v)(p->__pyx_v_faces, a); if (e) return e;
  }
  if (p->__pyx_v_vertices) {
    e = (*v)(p->__pyx_v_vertices, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_15_LoadModel(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *)o;
  tmp = ((PyObject*)p->__pyx_v_faces);
  p->__pyx_v_faces = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vertices);
  p->__pyx_v_vertices = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_15_LoadModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_15_LoadModel", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_15_LoadModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_15_LoadModel, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_15_LoadModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_15_LoadModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_16_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_16_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_16_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_16_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_16_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_16_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_16_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_16_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_16_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_16_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_16_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_16_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_16_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_16_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_16_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_16_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_16_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_16_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_16_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_17_genexpr[8];
static int __pyx_freecount_13chenhancc_WIN___pyx_scope_struct_17_genexpr = 0;

static PyObject *__pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_17_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_17_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr)))) {
    o = (PyObject*)__pyx_freelist_13chenhancc_WIN___pyx_scope_struct_17_genexpr[--__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_17_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_17_genexpr(PyObject *o) {
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_17_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr)))) {
    __pyx_freelist_13chenhancc_WIN___pyx_scope_struct_17_genexpr[__pyx_freecount_13chenhancc_WIN___pyx_scope_struct_17_genexpr++] = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_17_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_17_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_15_LoadModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_13chenhancc_WIN___pyx_scope_struct_17_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "chenhancc_WIN.__pyx_scope_struct_17_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_13chenhancc_WIN___pyx_scope_struct_17_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13chenhancc_WIN___pyx_scope_struct_17_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_13chenhancc_WIN___pyx_scope_struct_17_genexpr, /*tp_traverse*/
  __pyx_tp_clear_13chenhancc_WIN___pyx_scope_struct_17_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13chenhancc_WIN___pyx_scope_struct_17_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "chenhancc_WIN",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_FindSourceVertex_locals_genexpr, __pyx_k_FindSourceVertex_locals_genexpr, sizeof(__pyx_k_FindSourceVertex_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_LoadModel_locals_genexpr, __pyx_k_LoadModel_locals_genexpr, sizeof(__pyx_k_LoadModel_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_arg_faces_wrong_type, __pyx_k_arg_faces_wrong_type, sizeof(__pyx_k_arg_faces_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_0_wrong_type, __pyx_k_arg_in_0_wrong_type, sizeof(__pyx_k_arg_in_0_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_1_wrong_type, __pyx_k_arg_in_1_wrong_type, sizeof(__pyx_k_arg_in_1_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_2_wrong_type, __pyx_k_arg_in_2_wrong_type, sizeof(__pyx_k_arg_in_2_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_3_wrong_type, __pyx_k_arg_in_3_wrong_type, sizeof(__pyx_k_arg_in_3_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_indexOfSourceVerts_wrong_typ, __pyx_k_arg_indexOfSourceVerts_wrong_typ, sizeof(__pyx_k_arg_indexOfSourceVerts_wrong_typ), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_indexOfVert_wrong_type, __pyx_k_arg_indexOfVert_wrong_type, sizeof(__pyx_k_arg_indexOfVert_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_index_wrong_type, __pyx_k_arg_index_wrong_type, sizeof(__pyx_k_arg_index_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_inputModel_wrong_type, __pyx_k_arg_inputModel_wrong_type, sizeof(__pyx_k_arg_inputModel_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_num_wrong_type, __pyx_k_arg_num_wrong_type, sizeof(__pyx_k_arg_num_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_other_wrong_type, __pyx_k_arg_other_wrong_type, sizeof(__pyx_k_arg_other_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_resultingPath_wrong_type, __pyx_k_arg_resultingPath_wrong_type, sizeof(__pyx_k_arg_resultingPath_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_vertices_wrong_type, __pyx_k_arg_vertices_wrong_type, sizeof(__pyx_k_arg_vertices_wrong_type), 0, 0, 1, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_s_can_not_handle_type_of_s, __pyx_k_can_not_handle_type_of_s, sizeof(__pyx_k_can_not_handle_type_of_s), 0, 0, 1, 0},
  {&__pyx_n_s_chenhancc_WIN, __pyx_k_chenhancc_WIN, sizeof(__pyx_k_chenhancc_WIN), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_faces, __pyx_k_faces, sizeof(__pyx_k_faces), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_in_0, __pyx_k_in_0, sizeof(__pyx_k_in_0), 0, 0, 1, 1},
  {&__pyx_n_s_in_1, __pyx_k_in_1, sizeof(__pyx_k_in_1), 0, 0, 1, 1},
  {&__pyx_n_s_in_2, __pyx_k_in_2, sizeof(__pyx_k_in_2), 0, 0, 1, 1},
  {&__pyx_n_s_in_3, __pyx_k_in_3, sizeof(__pyx_k_in_3), 0, 0, 1, 1},
  {&__pyx_n_s_indexOfSourceVerts, __pyx_k_indexOfSourceVerts, sizeof(__pyx_k_indexOfSourceVerts), 0, 0, 1, 1},
  {&__pyx_n_s_indexOfVert, __pyx_k_indexOfVert, sizeof(__pyx_k_indexOfVert), 0, 0, 1, 1},
  {&__pyx_n_s_init_0, __pyx_k_init_0, sizeof(__pyx_k_init_0), 0, 0, 1, 1},
  {&__pyx_n_s_init_1, __pyx_k_init_1, sizeof(__pyx_k_init_1), 0, 0, 1, 1},
  {&__pyx_n_s_init_2, __pyx_k_init_2, sizeof(__pyx_k_init_2), 0, 0, 1, 1},
  {&__pyx_n_s_init_3, __pyx_k_init_3, sizeof(__pyx_k_init_3), 0, 0, 1, 1},
  {&__pyx_n_s_init_4, __pyx_k_init_4, sizeof(__pyx_k_init_4), 0, 0, 1, 1},
  {&__pyx_n_s_init___locals_genexpr, __pyx_k_init___locals_genexpr, sizeof(__pyx_k_init___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_inputModel, __pyx_k_inputModel, sizeof(__pyx_k_inputModel), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_resultingPath, __pyx_k_resultingPath, sizeof(__pyx_k_resultingPath), 0, 0, 1, 1},
  {&__pyx_kp_s_self_inst_cannot_be_converted_to, __pyx_k_self_inst_cannot_be_converted_to, sizeof(__pyx_k_self_inst_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_vertices, __pyx_k_vertices, sizeof(__pyx_k_vertices), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(1, 891, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.inst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_self_inst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initchenhancc_WIN(void); /*proto*/
PyMODINIT_FUNC initchenhancc_WIN(void)
#else
PyMODINIT_FUNC PyInit_chenhancc_WIN(void); /*proto*/
PyMODINIT_FUNC PyInit_chenhancc_WIN(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_chenhancc_WIN(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("chenhancc_WIN", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_chenhancc_WIN) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "chenhancc_WIN")) {
      if (unlikely(PyDict_SetItemString(modules, "chenhancc_WIN", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_CBaseModel) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_CBaseModel.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_13chenhancc_WIN_CBaseModel, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 31, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_13chenhancc_WIN_10CBaseModel_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_13chenhancc_WIN_10CBaseModel_2__init__.doc = __pyx_doc_13chenhancc_WIN_10CBaseModel_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_13chenhancc_WIN_10CBaseModel_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "CBaseModel", (PyObject *)&__pyx_type_13chenhancc_WIN_CBaseModel) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_CBaseModel) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_CBaseModel = &__pyx_type_13chenhancc_WIN_CBaseModel;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_CEdge) < 0) __PYX_ERR(1, 77, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_CEdge.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_13chenhancc_WIN_CEdge, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 77, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_13chenhancc_WIN_5CEdge_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_13chenhancc_WIN_5CEdge_2__init__.doc = __pyx_doc_13chenhancc_WIN_5CEdge_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_13chenhancc_WIN_5CEdge_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "CEdge", (PyObject *)&__pyx_type_13chenhancc_WIN_CEdge) < 0) __PYX_ERR(1, 77, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_CEdge) < 0) __PYX_ERR(1, 77, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_CEdge = &__pyx_type_13chenhancc_WIN_CEdge;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_CFace) < 0) __PYX_ERR(1, 177, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_CFace.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CFace", (PyObject *)&__pyx_type_13chenhancc_WIN_CFace) < 0) __PYX_ERR(1, 177, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_CFace) < 0) __PYX_ERR(1, 177, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_CFace = &__pyx_type_13chenhancc_WIN_CFace;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_CICHWithFurtherPriorityQueue) < 0) __PYX_ERR(1, 217, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_CICHWithFurtherPriorityQueue.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_13chenhancc_WIN_CICHWithFurtherPriorityQueue, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 217, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_2__init__.doc = __pyx_doc_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_13chenhancc_WIN_28CICHWithFurtherPriorityQueue_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "CICHWithFurtherPriorityQueue", (PyObject *)&__pyx_type_13chenhancc_WIN_CICHWithFurtherPriorityQueue) < 0) __PYX_ERR(1, 217, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_CICHWithFurtherPriorityQueue) < 0) __PYX_ERR(1, 217, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_CICHWithFurtherPriorityQueue = &__pyx_type_13chenhancc_WIN_CICHWithFurtherPriorityQueue;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_CImprovedCHWithEdgeValve) < 0) __PYX_ERR(1, 327, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_CImprovedCHWithEdgeValve.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_13chenhancc_WIN_CImprovedCHWithEdgeValve, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 327, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_13chenhancc_WIN_24CImprovedCHWithEdgeValve_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_13chenhancc_WIN_24CImprovedCHWithEdgeValve_2__init__.doc = __pyx_doc_13chenhancc_WIN_24CImprovedCHWithEdgeValve_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_13chenhancc_WIN_24CImprovedCHWithEdgeValve_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "CImprovedCHWithEdgeValve", (PyObject *)&__pyx_type_13chenhancc_WIN_CImprovedCHWithEdgeValve) < 0) __PYX_ERR(1, 327, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_CImprovedCHWithEdgeValve) < 0) __PYX_ERR(1, 327, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_CImprovedCHWithEdgeValve = &__pyx_type_13chenhancc_WIN_CImprovedCHWithEdgeValve;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_CPoint3D) < 0) __PYX_ERR(1, 437, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_CPoint3D.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CPoint3D", (PyObject *)&__pyx_type_13chenhancc_WIN_CPoint3D) < 0) __PYX_ERR(1, 437, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_CPoint3D) < 0) __PYX_ERR(1, 437, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_CPoint3D = &__pyx_type_13chenhancc_WIN_CPoint3D;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_CPreviousCH) < 0) __PYX_ERR(1, 518, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_CPreviousCH.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_13chenhancc_WIN_CPreviousCH, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 518, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_13chenhancc_WIN_11CPreviousCH_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_13chenhancc_WIN_11CPreviousCH_2__init__.doc = __pyx_doc_13chenhancc_WIN_11CPreviousCH_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_13chenhancc_WIN_11CPreviousCH_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "CPreviousCH", (PyObject *)&__pyx_type_13chenhancc_WIN_CPreviousCH) < 0) __PYX_ERR(1, 518, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_CPreviousCH) < 0) __PYX_ERR(1, 518, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_CPreviousCH = &__pyx_type_13chenhancc_WIN_CPreviousCH;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_CRichModel) < 0) __PYX_ERR(1, 628, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_CRichModel.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_13chenhancc_WIN_CRichModel, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 628, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_13chenhancc_WIN_10CRichModel_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_13chenhancc_WIN_10CRichModel_2__init__.doc = __pyx_doc_13chenhancc_WIN_10CRichModel_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_13chenhancc_WIN_10CRichModel_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "CRichModel", (PyObject *)&__pyx_type_13chenhancc_WIN_CRichModel) < 0) __PYX_ERR(1, 628, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_CRichModel) < 0) __PYX_ERR(1, 628, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_CRichModel = &__pyx_type_13chenhancc_WIN_CRichModel;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_EdgePoint) < 0) __PYX_ERR(1, 764, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_EdgePoint.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "EdgePoint", (PyObject *)&__pyx_type_13chenhancc_WIN_EdgePoint) < 0) __PYX_ERR(1, 764, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_EdgePoint) < 0) __PYX_ERR(1, 764, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_EdgePoint = &__pyx_type_13chenhancc_WIN_EdgePoint;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN_InfoAtVertex) < 0) __PYX_ERR(1, 864, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN_InfoAtVertex.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "InfoAtVertex", (PyObject *)&__pyx_type_13chenhancc_WIN_InfoAtVertex) < 0) __PYX_ERR(1, 864, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13chenhancc_WIN_InfoAtVertex) < 0) __PYX_ERR(1, 864, __pyx_L1_error)
  __pyx_ptype_13chenhancc_WIN_InfoAtVertex = &__pyx_type_13chenhancc_WIN_InfoAtVertex;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct__LoadModel) < 0) __PYX_ERR(1, 43, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct__LoadModel.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct__LoadModel = &__pyx_type_13chenhancc_WIN___pyx_scope_struct__LoadModel;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(1, 45, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_1_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(1, 46, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_2_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_2_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_2_genexpr;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_3___init__) < 0) __PYX_ERR(1, 225, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_3___init__.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_3___init__ = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_3___init__;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(1, 228, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_4_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_4_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex) < 0) __PYX_ERR(1, 241, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_5_FindSourceVertex;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(1, 244, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_6_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_6_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_7___init__) < 0) __PYX_ERR(1, 335, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_7___init__.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_7___init__ = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_7___init__;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_8_genexpr) < 0) __PYX_ERR(1, 338, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_8_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_8_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_8_genexpr;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex) < 0) __PYX_ERR(1, 351, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_9_FindSourceVertex;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_10_genexpr) < 0) __PYX_ERR(1, 354, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_10_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_10_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_10_genexpr;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_11___init__) < 0) __PYX_ERR(1, 526, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_11___init__.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_11___init__ = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_11___init__;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_12_genexpr) < 0) __PYX_ERR(1, 529, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_12_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_12_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_12_genexpr;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex) < 0) __PYX_ERR(1, 542, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_13_FindSourceVertex;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(1, 545, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_14_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_14_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_14_genexpr;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_15_LoadModel) < 0) __PYX_ERR(1, 730, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_15_LoadModel.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_15_LoadModel = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_15_LoadModel;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_16_genexpr) < 0) __PYX_ERR(1, 732, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_16_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_16_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_16_genexpr;
  if (PyType_Ready(&__pyx_type_13chenhancc_WIN___pyx_scope_struct_17_genexpr) < 0) __PYX_ERR(1, 733, __pyx_L1_error)
  __pyx_type_13chenhancc_WIN___pyx_scope_struct_17_genexpr.tp_print = 0;
  __pyx_ptype_13chenhancc_WIN___pyx_scope_struct_17_genexpr = &__pyx_type_13chenhancc_WIN___pyx_scope_struct_17_genexpr;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "chenhancc_WIN.pyx":1
 * #cython: c_string_encoding=ascii  # for cython>=0.19             # <<<<<<<<<<<<<<
 * #cython: embedsignature=False
 * from  libcpp.string  cimport string as libcpp_string
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "set.from_py":108
 * 
 * @cname("__pyx_convert_set_from_py_int")
 * cdef set[X] __pyx_convert_set_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init chenhancc_WIN", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init chenhancc_WIN");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* bytes_index */
  static CYTHON_INLINE char __Pyx_PyBytes_GetItemInt(PyObject* bytes, Py_ssize_t index, int check_bounds) {
    if (check_bounds) {
        Py_ssize_t size = PyBytes_GET_SIZE(bytes);
        if (unlikely(index >= size) | ((index < 0) & unlikely(index < -size))) {
            PyErr_SetString(PyExc_IndexError, "string index out of range");
            return (char) -1;
        }
    }
    if (index < 0)
        index += PyBytes_GET_SIZE(bytes);
    return PyBytes_AS_STRING(bytes)[index];
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_COMPILING_IN_CPYTHON
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
  static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject *use_cline;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FetchCommonType */
  static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* SwapException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallMethod1 */
  static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
  #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
      static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
      #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
      static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
      static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
      static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
